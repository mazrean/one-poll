// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for PollStatus.
const (
	Limited  PollStatus = "limited"
	Opened   PollStatus = "opened"
	Outdated PollStatus = "outdated"
)

// Defines values for PollType.
const (
	Radio PollType = "radio"
)

// Defines values for UserStatusAccessMode.
const (
	CanAccessDetails UserStatusAccessMode = "can_access_details"
	CanAnswer        UserStatusAccessMode = "can_answer"
	OnlyBrowsable    UserStatusAccessMode = "only_browsable"
)

// Defines values for WebAuthnAuthenticatorAttachment.
const (
	CrossPlatform WebAuthnAuthenticatorAttachment = "cross-platform"
	Platform      WebAuthnAuthenticatorAttachment = "platform"
)

// Defines values for WebAuthnAuthenticatorAttestationType.
const (
	Direct   WebAuthnAuthenticatorAttestationType = "direct"
	Indirect WebAuthnAuthenticatorAttestationType = "indirect"
	None     WebAuthnAuthenticatorAttestationType = "none"
)

// Defines values for WebAuthnAuthenticatorResidentKeyRequirement.
const (
	Discouraged WebAuthnAuthenticatorResidentKeyRequirement = "discouraged"
	Preferred   WebAuthnAuthenticatorResidentKeyRequirement = "preferred"
	Required    WebAuthnAuthenticatorResidentKeyRequirement = "required"
)

// Defines values for WebAuthnCredentialAlgorithm.
const (
	Minus7 WebAuthnCredentialAlgorithm = -7
)

// Defines values for WebAuthnCredentialType.
const (
	PublicKey WebAuthnCredentialType = "public-key"
)

// Answer 選択したボタンid配列
type Answer = []openapi_types.UUID

// Choice 選択肢ボタン
type Choice struct {
	// Choice 質問文
	Choice string             `json:"choice"`
	Id     openapi_types.UUID `json:"id"`
}

// NewPoll 質問idは存在しない。POST /polls/のボディ。
type NewPoll struct {
	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`
	Question []string   `json:"question"`

	// Tags 初期実装では含まない。
	Tags  *[]string `json:"tags,omitempty"`
	Title string    `json:"title"`
	Type  PollType  `json:"type"`
}

// PollBase 質問idは存在しない。
type PollBase struct {
	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`

	// Question 質問
	Question Questions `json:"question"`

	// Tags 初期実装では含まない。
	// Deprecated:
	Tags  *[]PollTag `json:"tags,omitempty"`
	Title string     `json:"title"`
	Type  PollType   `json:"type"`
}

// PollComment defines model for PollComment.
type PollComment struct {
	// Content コメント本文
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"createdAt"`
}

// PollID defines model for PollID.
type PollID = openapi_types.UUID

// PollResults defines model for PollResults.
type PollResults struct {
	// Count 回答総数
	Count  int      `json:"count"`
	PollId PollID   `json:"pollId"`
	Result []Result `json:"result"`
	Type   PollType `json:"type"`
}

// PollStatus 質問の状態
type PollStatus string

// PollSummaries defines model for PollSummaries.
type PollSummaries = []PollSummary

// PollSummary defines model for PollSummary.
type PollSummary struct {
	CreatedAt time.Time `json:"createdAt"`

	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`
	Owner    User       `json:"owner"`
	PollId   PollID     `json:"pollId"`

	// QStatus 質問の状態
	QStatus PollStatus `json:"qStatus"`

	// Question 質問
	Question Questions `json:"question"`

	// Tags 初期実装では含まない。
	// Deprecated:
	Tags  *[]PollTag `json:"tags,omitempty"`
	Title string     `json:"title"`
	Type  PollType   `json:"type"`

	// UserStatus 質問idに対するユーザーの権限
	UserStatus UserStatus `json:"userStatus"`
}

// PollTag defines model for PollTag.
type PollTag struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// PollTags defines model for PollTags.
type PollTags = []PollTag

// PollType defines model for PollType.
type PollType string

// PostPollId defines model for PostPollId.
type PostPollId struct {
	// Answer 選択したボタンid配列
	Answer  Answer `json:"answer"`
	Comment string `json:"comment"`
}

// PostTag defines model for PostTag.
type PostTag = string

// PostUser defines model for PostUser.
type PostUser struct {
	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name     UserName     `json:"name"`
	Password UserPassword `json:"password"`
}

// Questions 質問
type Questions = []Choice

// Response defines model for Response.
type Response struct {
	// Answer 選択したボタンid配列
	Answer Answer `json:"answer"`

	// Comment コメント本文
	Comment   *string   `json:"comment,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
}

// Result defines model for Result.
type Result struct {
	// Choice 質問文
	Choice string `json:"choice"`

	// Count その選択肢に回答をした人数
	Count int                `json:"count"`
	Id    openapi_types.UUID `json:"id"`
}

// User defines model for User.
type User struct {
	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name UserName           `json:"name"`
	Uuid openapi_types.UUID `json:"uuid"`
}

// UserName アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
type UserName = string

// UserPassword defines model for UserPassword.
type UserPassword = string

// UserStatus 質問idに対するユーザーの権限
type UserStatus struct {
	// AccessMode only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
	AccessMode UserStatusAccessMode `json:"accessMode"`

	// IsOwner オーナーか
	IsOwner bool `json:"isOwner"`
}

// UserStatusAccessMode only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
type UserStatusAccessMode string

// WebAuthnAuthenticatorAttachment defines model for WebAuthnAuthenticatorAttachment.
type WebAuthnAuthenticatorAttachment string

// WebAuthnAuthenticatorAttestationType defines model for WebAuthnAuthenticatorAttestationType.
type WebAuthnAuthenticatorAttestationType string

// WebAuthnAuthenticatorResidentKeyRequirement defines model for WebAuthnAuthenticatorResidentKeyRequirement.
type WebAuthnAuthenticatorResidentKeyRequirement string

// WebAuthnAuthenticatorSelectionCriteria defines model for WebAuthnAuthenticatorSelectionCriteria.
type WebAuthnAuthenticatorSelectionCriteria struct {
	AuthenticatorAttachment *WebAuthnAuthenticatorAttachment             `json:"authenticatorAttachment,omitempty"`
	RequireResidentKey      *bool                                        `json:"requireResidentKey,omitempty"`
	ResidentKey             *WebAuthnAuthenticatorResidentKeyRequirement `json:"residentKey,omitempty"`
}

// WebAuthnChallenge defines model for WebAuthnChallenge.
type WebAuthnChallenge = string

// WebAuthnCredential defines model for WebAuthnCredential.
type WebAuthnCredential struct {
	CreatedAt  time.Time          `json:"createdAt"`
	Id         openapi_types.UUID `json:"id"`
	LastUsedAt time.Time          `json:"lastUsedAt"`
	Name       string             `json:"name"`
}

// WebAuthnCredentialAlgorithm defines model for WebAuthnCredentialAlgorithm.
type WebAuthnCredentialAlgorithm int

// WebAuthnCredentialBase defines model for WebAuthnCredentialBase.
type WebAuthnCredentialBase struct {
	Id   string                 `json:"id"`
	Type WebAuthnCredentialType `json:"type"`
}

// WebAuthnCredentialType defines model for WebAuthnCredentialType.
type WebAuthnCredentialType string

// WebAuthnPubKeyCredParam defines model for WebAuthnPubKeyCredParam.
type WebAuthnPubKeyCredParam struct {
	Alg  WebAuthnCredentialAlgorithm `json:"alg"`
	Type WebAuthnCredentialType      `json:"type"`
}

// WebAuthnPublicKeyCredentialCreation defines model for WebAuthnPublicKeyCredentialCreation.
type WebAuthnPublicKeyCredentialCreation struct {
	Id       string                                      `json:"id"`
	RawId    string                                      `json:"rawId"`
	Response WebAuthnPublicKeyCredentialCreationResponse `json:"response"`
	Type     WebAuthnCredentialType                      `json:"type"`
}

// WebAuthnPublicKeyCredentialCreationOptions defines model for WebAuthnPublicKeyCredentialCreationOptions.
type WebAuthnPublicKeyCredentialCreationOptions struct {
	Attestation            WebAuthnAuthenticatorAttestationType   `json:"attestation"`
	AuthenticatorSelection WebAuthnAuthenticatorSelectionCriteria `json:"authenticatorSelection"`
	Challenge              WebAuthnChallenge                      `json:"challenge"`
	ExcludeCredentials     *[]WebAuthnCredentialBase              `json:"excludeCredentials,omitempty"`
	PubKeyCredParams       []WebAuthnPubKeyCredParam              `json:"pubKeyCredParams"`
	Rp                     WebAuthnRelyingParty                   `json:"rp"`
	Timeout                int                                    `json:"timeout"`
	User                   WebAuthnUser                           `json:"user"`
}

// WebAuthnPublicKeyCredentialCreationResponse defines model for WebAuthnPublicKeyCredentialCreationResponse.
type WebAuthnPublicKeyCredentialCreationResponse struct {
	AttestationObject string `json:"attestationObject"`
	ClientDataJSON    string `json:"clientDataJSON"`
}

// WebAuthnPublicKeyCredentialRequest defines model for WebAuthnPublicKeyCredentialRequest.
type WebAuthnPublicKeyCredentialRequest struct {
	Id       string                                     `json:"id"`
	RawId    string                                     `json:"rawId"`
	Response WebAuthnPublicKeyCredentialRequestResponse `json:"response"`
	Type     WebAuthnCredentialType                     `json:"type"`
}

// WebAuthnPublicKeyCredentialRequestOptions defines model for WebAuthnPublicKeyCredentialRequestOptions.
type WebAuthnPublicKeyCredentialRequestOptions struct {
	Challenge WebAuthnChallenge `json:"challenge"`
	RpId      *string           `json:"rpId,omitempty"`
	Timeout   *int              `json:"timeout,omitempty"`
}

// WebAuthnPublicKeyCredentialRequestResponse defines model for WebAuthnPublicKeyCredentialRequestResponse.
type WebAuthnPublicKeyCredentialRequestResponse struct {
	AuthenticatorData string  `json:"authenticatorData"`
	ClientDataJSON    string  `json:"clientDataJSON"`
	Signature         string  `json:"signature"`
	UserHandle        *string `json:"userHandle,omitempty"`
}

// WebAuthnRelyingParty defines model for WebAuthnRelyingParty.
type WebAuthnRelyingParty struct {
	Id   *string `json:"id,omitempty"`
	Name string  `json:"name"`
}

// WebAuthnUser defines model for WebAuthnUser.
type WebAuthnUser struct {
	// DisplayName アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	DisplayName UserName           `json:"displayName"`
	Id          openapi_types.UUID `json:"id"`

	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name UserName `json:"name"`
}

// GetPollsParams defines parameters for GetPolls.
type GetPollsParams struct {
	// Limit 最大質問数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset 質問オフセット
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Match タイトルの部分一致
	Match *string `form:"match,omitempty" json:"match,omitempty"`
}

// GetPollsPollIDCommentsParams defines parameters for GetPollsPollIDComments.
type GetPollsPollIDCommentsParams struct {
	// Limit 最大コメント取得数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset オフセット
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostPollsJSONRequestBody defines body for PostPolls for application/json ContentType.
type PostPollsJSONRequestBody = NewPoll

// PostPollsPollIDJSONRequestBody defines body for PostPollsPollID for application/json ContentType.
type PostPollsPollIDJSONRequestBody = PostPollId

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody = PostTag

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUser

// PostUsersSigninJSONRequestBody defines body for PostUsersSignin for application/json ContentType.
type PostUsersSigninJSONRequestBody = PostUser

// PostWebauthnAuthenticateFinishJSONRequestBody defines body for PostWebauthnAuthenticateFinish for application/json ContentType.
type PostWebauthnAuthenticateFinishJSONRequestBody = WebAuthnPublicKeyCredentialRequest

// PostWebauthnResisterFinishJSONRequestBody defines body for PostWebauthnResisterFinish for application/json ContentType.
type PostWebauthnResisterFinishJSONRequestBody = WebAuthnPublicKeyCredentialCreation

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /polls)
	GetPolls(ctx echo.Context, params GetPollsParams) error

	// (POST /polls)
	PostPolls(ctx echo.Context) error

	// (DELETE /polls/{pollID})
	DeletePollsPollID(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID})
	GetPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID})
	PostPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID}/close)
	PostPollsClose(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID}/comments)
	GetPollsPollIDComments(ctx echo.Context, pollID string, params GetPollsPollIDCommentsParams) error

	// (GET /polls/{pollID}/results)
	GetPollsPollIDResults(ctx echo.Context, pollID string) error

	// (GET /tags)
	GetTags(ctx echo.Context) error

	// (POST /tags)
	PostTags(ctx echo.Context) error

	// (POST /users)
	PostUsers(ctx echo.Context) error

	// (DELETE /users/me)
	DeleteUsersMe(ctx echo.Context) error

	// (GET /users/me)
	GetUsersMe(ctx echo.Context) error

	// (GET /users/me/answers)
	GetUsersMeAnswers(ctx echo.Context) error

	// (GET /users/me/owners)
	GetUsersMeOwners(ctx echo.Context) error

	// (POST /users/signin)
	PostUsersSignin(ctx echo.Context) error

	// (POST /users/signout)
	PostUsersSignout(ctx echo.Context) error
	// webauthnの認証終了
	// (POST /webauthn/authenticate/finish)
	PostWebauthnAuthenticateFinish(ctx echo.Context) error
	// webauthnの認証開始
	// (POST /webauthn/authenticate/start)
	PostWebauthnAuthenticateStart(ctx echo.Context) error
	// webauthnの登録情報一覧
	// (GET /webauthn/credentials)
	GetWebauthnCredentials(ctx echo.Context) error
	// webauthnの登録情報削除
	// (DELETE /webauthn/credentials/{credentialID})
	DeleteWebauthnCredentials(ctx echo.Context, credentialID openapi_types.UUID) error
	// webauthnの公開鍵登録終了
	// (POST /webauthn/resister/finish)
	PostWebauthnResisterFinish(ctx echo.Context) error
	// webauthnの公開鍵登録開始
	// (POST /webauthn/resister/start)
	PostWebauthnResisterStart(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPolls converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolls(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "match" -------------

	err = runtime.BindQueryParameter("form", true, false, "match", ctx.QueryParams(), &params.Match)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter match: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPolls(ctx, params)
	return err
}

// PostPolls converts echo context to params.
func (w *ServerInterfaceWrapper) PostPolls(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPolls(ctx)
	return err
}

// DeletePollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePollsPollID(ctx, pollID)
	return err
}

// GetPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollID(ctx, pollID)
	return err
}

// PostPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPollsPollID(ctx, pollID)
	return err
}

// PostPollsClose converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsClose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPollsClose(ctx, pollID)
	return err
}

// GetPollsPollIDComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsPollIDCommentsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollIDComments(ctx, pollID, params)
	return err
}

// GetPollsPollIDResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollIDResults(ctx, pollID)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersMe(ctx)
	return err
}

// GetUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMe(ctx)
	return err
}

// GetUsersMeAnswers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeAnswers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMeAnswers(ctx)
	return err
}

// GetUsersMeOwners converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeOwners(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMeOwners(ctx)
	return err
}

// PostUsersSignin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignin(ctx)
	return err
}

// PostUsersSignout converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignout(ctx)
	return err
}

// PostWebauthnAuthenticateFinish converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnAuthenticateFinish(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnAuthenticateFinish(ctx)
	return err
}

// PostWebauthnAuthenticateStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnAuthenticateStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnAuthenticateStart(ctx)
	return err
}

// GetWebauthnCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetWebauthnCredentials(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWebauthnCredentials(ctx)
	return err
}

// DeleteWebauthnCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWebauthnCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "credentialID" -------------
	var credentialID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "credentialID", ctx.Param("credentialID"), &credentialID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWebauthnCredentials(ctx, credentialID)
	return err
}

// PostWebauthnResisterFinish converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnResisterFinish(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnResisterFinish(ctx)
	return err
}

// PostWebauthnResisterStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnResisterStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnResisterStart(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/polls", wrapper.GetPolls)
	router.POST(baseURL+"/polls", wrapper.PostPolls)
	router.DELETE(baseURL+"/polls/:pollID", wrapper.DeletePollsPollID)
	router.GET(baseURL+"/polls/:pollID", wrapper.GetPollsPollID)
	router.POST(baseURL+"/polls/:pollID", wrapper.PostPollsPollID)
	router.POST(baseURL+"/polls/:pollID/close", wrapper.PostPollsClose)
	router.GET(baseURL+"/polls/:pollID/comments", wrapper.GetPollsPollIDComments)
	router.GET(baseURL+"/polls/:pollID/results", wrapper.GetPollsPollIDResults)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/me", wrapper.DeleteUsersMe)
	router.GET(baseURL+"/users/me", wrapper.GetUsersMe)
	router.GET(baseURL+"/users/me/answers", wrapper.GetUsersMeAnswers)
	router.GET(baseURL+"/users/me/owners", wrapper.GetUsersMeOwners)
	router.POST(baseURL+"/users/signin", wrapper.PostUsersSignin)
	router.POST(baseURL+"/users/signout", wrapper.PostUsersSignout)
	router.POST(baseURL+"/webauthn/authenticate/finish", wrapper.PostWebauthnAuthenticateFinish)
	router.POST(baseURL+"/webauthn/authenticate/start", wrapper.PostWebauthnAuthenticateStart)
	router.GET(baseURL+"/webauthn/credentials", wrapper.GetWebauthnCredentials)
	router.DELETE(baseURL+"/webauthn/credentials/:credentialID", wrapper.DeleteWebauthnCredentials)
	router.POST(baseURL+"/webauthn/resister/finish", wrapper.PostWebauthnResisterFinish)
	router.POST(baseURL+"/webauthn/resister/start", wrapper.PostWebauthnResisterStart)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
