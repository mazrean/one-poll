// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for PollStatus.
const (
	Limited  PollStatus = "limited"
	Opened   PollStatus = "opened"
	Outdated PollStatus = "outdated"
)

// Defines values for PollType.
const (
	Radio PollType = "radio"
)

// Defines values for UserStatusAccessMode.
const (
	CanAccessDetails UserStatusAccessMode = "can_access_details"
	CanAnswer        UserStatusAccessMode = "can_answer"
	OnlyBrowsable    UserStatusAccessMode = "only_browsable"
)

// Defines values for WebAuthnAuthenticatorAttachment.
const (
	CrossPlatform WebAuthnAuthenticatorAttachment = "cross-platform"
	Platform      WebAuthnAuthenticatorAttachment = "platform"
)

// Defines values for WebAuthnAuthenticatorAttestationType.
const (
	Direct   WebAuthnAuthenticatorAttestationType = "direct"
	Indirect WebAuthnAuthenticatorAttestationType = "indirect"
	None     WebAuthnAuthenticatorAttestationType = "none"
)

// Defines values for WebAuthnAuthenticatorResidentKeyRequirement.
const (
	Discouraged WebAuthnAuthenticatorResidentKeyRequirement = "discouraged"
	Preferred   WebAuthnAuthenticatorResidentKeyRequirement = "preferred"
	Required    WebAuthnAuthenticatorResidentKeyRequirement = "required"
)

// Defines values for WebAuthnCredentialAlgorithm.
const (
	Minus7 WebAuthnCredentialAlgorithm = -7
)

// Defines values for WebAuthnCredentialType.
const (
	PublicKey WebAuthnCredentialType = "public-key"
)

// Answer 選択したボタンid配列
type Answer = []openapi_types.UUID

// Choice 選択肢ボタン
type Choice struct {
	// Choice 質問文
	Choice string             `json:"choice"`
	Id     openapi_types.UUID `json:"id"`
}

// NewPoll 質問idは存在しない。POST /polls/のボディ。
type NewPoll struct {
	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`
	Question []string   `json:"question"`

	// Tags 初期実装では含まない。
	Tags  *[]string `json:"tags,omitempty"`
	Title string    `json:"title"`
	Type  PollType  `json:"type"`
}

// PollBase 質問idは存在しない。
type PollBase struct {
	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`

	// Question 質問
	Question Questions `json:"question"`

	// Tags 初期実装では含まない。
	// Deprecated:
	Tags  *[]PollTag `json:"tags,omitempty"`
	Title string     `json:"title"`
	Type  PollType   `json:"type"`
}

// PollComment defines model for PollComment.
type PollComment struct {
	// Content コメント本文
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"createdAt"`
}

// PollID defines model for PollID.
type PollID = openapi_types.UUID

// PollResults defines model for PollResults.
type PollResults struct {
	// Count 回答総数
	Count  int      `json:"count"`
	PollId PollID   `json:"pollId"`
	Result []Result `json:"result"`
	Type   PollType `json:"type"`
}

// PollStatus 質問の状態
type PollStatus string

// PollSummaries defines model for PollSummaries.
type PollSummaries = []PollSummary

// PollSummary defines model for PollSummary.
type PollSummary struct {
	CreatedAt time.Time `json:"createdAt"`

	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`
	Owner    User       `json:"owner"`
	PollId   PollID     `json:"pollId"`

	// QStatus 質問の状態
	QStatus PollStatus `json:"qStatus"`

	// Question 質問
	Question Questions `json:"question"`

	// Tags 初期実装では含まない。
	// Deprecated:
	Tags  *[]PollTag `json:"tags,omitempty"`
	Title string     `json:"title"`
	Type  PollType   `json:"type"`

	// UserStatus 質問idに対するユーザーの権限
	UserStatus UserStatus `json:"userStatus"`
}

// PollTag defines model for PollTag.
type PollTag struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// PollTags defines model for PollTags.
type PollTags = []PollTag

// PollType defines model for PollType.
type PollType string

// PostPollId defines model for PostPollId.
type PostPollId struct {
	// Answer 選択したボタンid配列
	Answer  Answer `json:"answer"`
	Comment string `json:"comment"`
}

// PostTag defines model for PostTag.
type PostTag = string

// PostUser defines model for PostUser.
type PostUser struct {
	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name     UserName     `json:"name"`
	Password UserPassword `json:"password"`
}

// Questions 質問
type Questions = []Choice

// Response defines model for Response.
type Response struct {
	// Answer 選択したボタンid配列
	Answer Answer `json:"answer"`

	// Comment コメント本文
	Comment   *string   `json:"comment,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
}

// Result defines model for Result.
type Result struct {
	// Choice 質問文
	Choice string `json:"choice"`

	// Count その選択肢に回答をした人数
	Count int                `json:"count"`
	Id    openapi_types.UUID `json:"id"`
}

// User defines model for User.
type User struct {
	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name UserName           `json:"name"`
	Uuid openapi_types.UUID `json:"uuid"`
}

// UserName アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
type UserName = string

// UserPassword defines model for UserPassword.
type UserPassword = string

// UserStatus 質問idに対するユーザーの権限
type UserStatus struct {
	// AccessMode only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
	AccessMode UserStatusAccessMode `json:"accessMode"`

	// IsOwner オーナーか
	IsOwner bool `json:"isOwner"`
}

// UserStatusAccessMode only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
type UserStatusAccessMode string

// WebAuthnAuthenticatorAttachment defines model for WebAuthnAuthenticatorAttachment.
type WebAuthnAuthenticatorAttachment string

// WebAuthnAuthenticatorAttestationType defines model for WebAuthnAuthenticatorAttestationType.
type WebAuthnAuthenticatorAttestationType string

// WebAuthnAuthenticatorResidentKeyRequirement defines model for WebAuthnAuthenticatorResidentKeyRequirement.
type WebAuthnAuthenticatorResidentKeyRequirement string

// WebAuthnAuthenticatorSelectionCriteria defines model for WebAuthnAuthenticatorSelectionCriteria.
type WebAuthnAuthenticatorSelectionCriteria struct {
	AuthenticatorAttachment *WebAuthnAuthenticatorAttachment             `json:"authenticatorAttachment,omitempty"`
	RequireResidentKey      *bool                                        `json:"requireResidentKey,omitempty"`
	ResidentKey             *WebAuthnAuthenticatorResidentKeyRequirement `json:"residentKey,omitempty"`
}

// WebAuthnChallenge defines model for WebAuthnChallenge.
type WebAuthnChallenge = string

// WebAuthnCredential defines model for WebAuthnCredential.
type WebAuthnCredential struct {
	CreatedAt  time.Time          `json:"createdAt"`
	Id         openapi_types.UUID `json:"id"`
	LastUsedAt time.Time          `json:"lastUsedAt"`
	Name       string             `json:"name"`
}

// WebAuthnCredentialAlgorithm defines model for WebAuthnCredentialAlgorithm.
type WebAuthnCredentialAlgorithm int

// WebAuthnCredentialType defines model for WebAuthnCredentialType.
type WebAuthnCredentialType string

// WebAuthnPubKeyCredParam defines model for WebAuthnPubKeyCredParam.
type WebAuthnPubKeyCredParam struct {
	Alg  WebAuthnCredentialAlgorithm `json:"alg"`
	Type WebAuthnCredentialType      `json:"type"`
}

// WebAuthnPublicKeyCredentialCreation defines model for WebAuthnPublicKeyCredentialCreation.
type WebAuthnPublicKeyCredentialCreation struct {
	Id       string                                      `json:"id"`
	RawId    string                                      `json:"rawId"`
	Response WebAuthnPublicKeyCredentialCreationResponse `json:"response"`
	Type     WebAuthnCredentialType                      `json:"type"`
}

// WebAuthnPublicKeyCredentialCreationOptions defines model for WebAuthnPublicKeyCredentialCreationOptions.
type WebAuthnPublicKeyCredentialCreationOptions struct {
	Attestation            WebAuthnAuthenticatorAttestationType   `json:"attestation"`
	AuthenticatorSelection WebAuthnAuthenticatorSelectionCriteria `json:"authenticatorSelection"`
	Challenge              WebAuthnChallenge                      `json:"challenge"`
	PubKeyCredParams       []WebAuthnPubKeyCredParam              `json:"pubKeyCredParams"`
	Rp                     WebAuthnRelyingParty                   `json:"rp"`
	Timeout                int                                    `json:"timeout"`
	User                   WebAuthnUser                           `json:"user"`
}

// WebAuthnPublicKeyCredentialCreationResponse defines model for WebAuthnPublicKeyCredentialCreationResponse.
type WebAuthnPublicKeyCredentialCreationResponse struct {
	AttestationObject string `json:"attestationObject"`
	ClientDataJSON    string `json:"clientDataJSON"`
}

// WebAuthnPublicKeyCredentialRequest defines model for WebAuthnPublicKeyCredentialRequest.
type WebAuthnPublicKeyCredentialRequest struct {
	Id       string                                     `json:"id"`
	RawId    string                                     `json:"rawId"`
	Response WebAuthnPublicKeyCredentialRequestResponse `json:"response"`
	Type     WebAuthnCredentialType                     `json:"type"`
}

// WebAuthnPublicKeyCredentialRequestOptions defines model for WebAuthnPublicKeyCredentialRequestOptions.
type WebAuthnPublicKeyCredentialRequestOptions struct {
	Challenge WebAuthnChallenge `json:"challenge"`
	RpId      *string           `json:"rpId,omitempty"`
	Timeout   *int              `json:"timeout,omitempty"`
}

// WebAuthnPublicKeyCredentialRequestResponse defines model for WebAuthnPublicKeyCredentialRequestResponse.
type WebAuthnPublicKeyCredentialRequestResponse struct {
	AuthenticatorData string  `json:"authenticatorData"`
	ClientDataJSON    string  `json:"clientDataJSON"`
	Signature         string  `json:"signature"`
	UserHandle        *string `json:"userHandle,omitempty"`
}

// WebAuthnRelyingParty defines model for WebAuthnRelyingParty.
type WebAuthnRelyingParty struct {
	Id   *string `json:"id,omitempty"`
	Name string  `json:"name"`
}

// WebAuthnUser defines model for WebAuthnUser.
type WebAuthnUser struct {
	// DisplayName アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	DisplayName UserName           `json:"displayName"`
	Id          openapi_types.UUID `json:"id"`

	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name UserName `json:"name"`
}

// GetPollsParams defines parameters for GetPolls.
type GetPollsParams struct {
	// Limit 最大質問数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset 質問オフセット
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Match タイトルの部分一致
	Match *string `form:"match,omitempty" json:"match,omitempty"`
}

// GetPollsPollIDCommentsParams defines parameters for GetPollsPollIDComments.
type GetPollsPollIDCommentsParams struct {
	// Limit 最大コメント取得数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset オフセット
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostPollsJSONRequestBody defines body for PostPolls for application/json ContentType.
type PostPollsJSONRequestBody = NewPoll

// PostPollsPollIDJSONRequestBody defines body for PostPollsPollID for application/json ContentType.
type PostPollsPollIDJSONRequestBody = PostPollId

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody = PostTag

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUser

// PostUsersSigninJSONRequestBody defines body for PostUsersSignin for application/json ContentType.
type PostUsersSigninJSONRequestBody = PostUser

// PostWebauthnAuthenticateFinishJSONRequestBody defines body for PostWebauthnAuthenticateFinish for application/json ContentType.
type PostWebauthnAuthenticateFinishJSONRequestBody = WebAuthnPublicKeyCredentialRequest

// PostWebauthnResisterFinishJSONRequestBody defines body for PostWebauthnResisterFinish for application/json ContentType.
type PostWebauthnResisterFinishJSONRequestBody = WebAuthnPublicKeyCredentialCreation

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /polls)
	GetPolls(ctx echo.Context, params GetPollsParams) error

	// (POST /polls)
	PostPolls(ctx echo.Context) error

	// (DELETE /polls/{pollID})
	DeletePollsPollID(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID})
	GetPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID})
	PostPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID}/close)
	PostPollsClose(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID}/comments)
	GetPollsPollIDComments(ctx echo.Context, pollID string, params GetPollsPollIDCommentsParams) error

	// (GET /polls/{pollID}/results)
	GetPollsPollIDResults(ctx echo.Context, pollID string) error

	// (GET /tags)
	GetTags(ctx echo.Context) error

	// (POST /tags)
	PostTags(ctx echo.Context) error

	// (POST /users)
	PostUsers(ctx echo.Context) error

	// (DELETE /users/me)
	DeleteUsersMe(ctx echo.Context) error

	// (GET /users/me)
	GetUsersMe(ctx echo.Context) error

	// (GET /users/me/answers)
	GetUsersMeAnswers(ctx echo.Context) error

	// (GET /users/me/owners)
	GetUsersMeOwners(ctx echo.Context) error

	// (POST /users/signin)
	PostUsersSignin(ctx echo.Context) error

	// (POST /users/signout)
	PostUsersSignout(ctx echo.Context) error
	// webauthnの認証終了
	// (POST /webauthn/authenticate/finish)
	PostWebauthnAuthenticateFinish(ctx echo.Context) error
	// webauthnの認証開始
	// (POST /webauthn/authenticate/start)
	PostWebauthnAuthenticateStart(ctx echo.Context) error
	// webauthnの登録情報削除
	// (DELETE /webauthn/credentials)
	DeleteWebauthnCredentials(ctx echo.Context) error
	// webauthnの登録情報一覧
	// (GET /webauthn/credentials)
	GetWebauthnCredentials(ctx echo.Context) error
	// webauthnの公開鍵登録終了
	// (POST /webauthn/resister/finish)
	PostWebauthnResisterFinish(ctx echo.Context) error
	// webauthnの公開鍵登録開始
	// (POST /webauthn/resister/start)
	PostWebauthnResisterStart(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPolls converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolls(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "match" -------------

	err = runtime.BindQueryParameter("form", true, false, "match", ctx.QueryParams(), &params.Match)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter match: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPolls(ctx, params)
	return err
}

// PostPolls converts echo context to params.
func (w *ServerInterfaceWrapper) PostPolls(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPolls(ctx)
	return err
}

// DeletePollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePollsPollID(ctx, pollID)
	return err
}

// GetPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollID(ctx, pollID)
	return err
}

// PostPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPollsPollID(ctx, pollID)
	return err
}

// PostPollsClose converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsClose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPollsClose(ctx, pollID)
	return err
}

// GetPollsPollIDComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsPollIDCommentsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollIDComments(ctx, pollID, params)
	return err
}

// GetPollsPollIDResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollIDResults(ctx, pollID)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersMe(ctx)
	return err
}

// GetUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMe(ctx)
	return err
}

// GetUsersMeAnswers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeAnswers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMeAnswers(ctx)
	return err
}

// GetUsersMeOwners converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeOwners(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMeOwners(ctx)
	return err
}

// PostUsersSignin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignin(ctx)
	return err
}

// PostUsersSignout converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignout(ctx)
	return err
}

// PostWebauthnAuthenticateFinish converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnAuthenticateFinish(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnAuthenticateFinish(ctx)
	return err
}

// PostWebauthnAuthenticateStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnAuthenticateStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnAuthenticateStart(ctx)
	return err
}

// DeleteWebauthnCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWebauthnCredentials(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWebauthnCredentials(ctx)
	return err
}

// GetWebauthnCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetWebauthnCredentials(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWebauthnCredentials(ctx)
	return err
}

// PostWebauthnResisterFinish converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnResisterFinish(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnResisterFinish(ctx)
	return err
}

// PostWebauthnResisterStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnResisterStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnResisterStart(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/polls", wrapper.GetPolls)
	router.POST(baseURL+"/polls", wrapper.PostPolls)
	router.DELETE(baseURL+"/polls/:pollID", wrapper.DeletePollsPollID)
	router.GET(baseURL+"/polls/:pollID", wrapper.GetPollsPollID)
	router.POST(baseURL+"/polls/:pollID", wrapper.PostPollsPollID)
	router.POST(baseURL+"/polls/:pollID/close", wrapper.PostPollsClose)
	router.GET(baseURL+"/polls/:pollID/comments", wrapper.GetPollsPollIDComments)
	router.GET(baseURL+"/polls/:pollID/results", wrapper.GetPollsPollIDResults)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/me", wrapper.DeleteUsersMe)
	router.GET(baseURL+"/users/me", wrapper.GetUsersMe)
	router.GET(baseURL+"/users/me/answers", wrapper.GetUsersMeAnswers)
	router.GET(baseURL+"/users/me/owners", wrapper.GetUsersMeOwners)
	router.POST(baseURL+"/users/signin", wrapper.PostUsersSignin)
	router.POST(baseURL+"/users/signout", wrapper.PostUsersSignout)
	router.POST(baseURL+"/webauthn/authenticate/finish", wrapper.PostWebauthnAuthenticateFinish)
	router.POST(baseURL+"/webauthn/authenticate/start", wrapper.PostWebauthnAuthenticateStart)
	router.DELETE(baseURL+"/webauthn/credentials", wrapper.DeleteWebauthnCredentials)
	router.GET(baseURL+"/webauthn/credentials", wrapper.GetWebauthnCredentials)
	router.POST(baseURL+"/webauthn/resister/finish", wrapper.PostWebauthnResisterFinish)
	router.POST(baseURL+"/webauthn/resister/start", wrapper.PostWebauthnResisterStart)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/073WlmZSQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
