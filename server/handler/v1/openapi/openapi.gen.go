// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for PollStatus.
const (
	PollStatusLimited PollStatus = "limited"

	PollStatusOpened PollStatus = "opened"

	PollStatusOutdated PollStatus = "outdated"
)

// Defines values for PollType.
const (
	PollTypeRadio PollType = "radio"
)

// Defines values for UserStatusAccessMode.
const (
	UserStatusAccessModeCanAccessDetails UserStatusAccessMode = "can_access_details"

	UserStatusAccessModeCanAnswer UserStatusAccessMode = "can_answer"

	UserStatusAccessModeOnlyBrowsable UserStatusAccessMode = "only_browsable"
)

// 選択したボタンid配列
type Answer []int

// 選択肢ボタン
type Choice struct {
	// 質問文
	Choice string `json:"choice"`
	Id     string `json:"id"`
}

// 質問idは存在しない。POST /polls/のボディ。
type NewPoll struct {
	// deadlineをpostする、またはq_statusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`
	Question []string   `json:"question"`

	// 初期実装では含まない。
	Tags  *[]string `json:"tags,omitempty"`
	Title string    `json:"title"`
	Type  PollType  `json:"type"`
}

// 質問idは存在しない。
type PollBase struct {
	// deadlineをpostする、またはq_statusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`

	// 質問
	Question Questions `json:"question"`

	// 初期実装では含まない。
	Tags  *[]PollTag `json:"tags,omitempty"`
	Title string     `json:"title"`
	Type  PollType   `json:"type"`
}

// PollComment defines model for PollComment.
type PollComment struct {
	// コメント本文
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	User      User      `json:"user"`
}

// PollID defines model for PollID.
type PollID string

// PollResults defines model for PollResults.
type PollResults struct {
	// 回答総数
	Count  *int    `json:"count,omitempty"`
	PollId *PollID `json:"poll_id,omitempty"`

	// 結果
	Result *Results  `json:"result,omitempty"`
	Type   *PollType `json:"type,omitempty"`
}

// 質問の状態
type PollStatus string

// PollSummaries defines model for PollSummaries.
type PollSummaries []PollSummary

// PollSummary defines model for PollSummary.
type PollSummary struct {
	// Embedded fields due to inline allOf schema
	PollId PollID `json:"poll_id"`
	// Embedded struct due to allOf(#/components/schemas/PollBase)
	PollBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	CreatedAt time.Time `json:"created_at"`
	Owner     User      `json:"owner"`

	// 質問の状態
	QStatus PollStatus `json:"q_status"`

	// 質問idに対するユーザーの権限
	UserStatus UserStatus `json:"user_status"`
}

// PollTag defines model for PollTag.
type PollTag struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// PollTags defines model for PollTags.
type PollTags []PollTag

// PollType defines model for PollType.
type PollType string

// PostPollId defines model for PostPollId.
type PostPollId struct {
	// 選択したボタンid配列
	Answer  *Answer `json:"answer,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

// PostTag defines model for PostTag.
type PostTag string

// PostUser defines model for PostUser.
type PostUser struct {
	// アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name     UserName     `json:"name"`
	Password UserPassword `json:"password"`
}

// 質問
type Questions []Choice

// 結果
type Results []struct {
	// Embedded struct due to allOf(#/components/schemas/Choice)
	Choice `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// その選択肢に回答をした人数
	Count int `json:"count"`
}

// User defines model for User.
type User struct {
	// アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name UserName `json:"name"`
	Uuid string   `json:"uuid"`
}

// アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
type UserName string

// UserPassword defines model for UserPassword.
type UserPassword string

// 質問idに対するユーザーの権限
type UserStatus struct {
	// only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
	AccessMode UserStatusAccessMode `json:"access_mode"`

	// オーナーか
	IsOwner bool `json:"is_owner"`
}

// only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
type UserStatusAccessMode string

// GetPollsParams defines parameters for GetPolls.
type GetPollsParams struct {
	// 最大質問数
	Limit *int `json:"limit,omitempty"`

	// 質問オフセット
	Offset *int `json:"offset,omitempty"`

	// タイトルの部分一致
	Match *string `json:"match,omitempty"`
}

// PostPollsJSONBody defines parameters for PostPolls.
type PostPollsJSONBody NewPoll

// PostPollsPollIDJSONBody defines parameters for PostPollsPollID.
type PostPollsPollIDJSONBody PostPollId

// GetPollsPollIDCommentsParams defines parameters for GetPollsPollIDComments.
type GetPollsPollIDCommentsParams struct {
	// 最大コメント取得数
	Limit *int `json:"limit,omitempty"`

	// オフセット
	Offset *int `json:"offset,omitempty"`
}

// PostTagsJSONBody defines parameters for PostTags.
type PostTagsJSONBody PostTag

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody PostUser

// PostUsersSigninJSONBody defines parameters for PostUsersSignin.
type PostUsersSigninJSONBody PostUser

// PostPollsJSONRequestBody defines body for PostPolls for application/json ContentType.
type PostPollsJSONRequestBody PostPollsJSONBody

// PostPollsPollIDJSONRequestBody defines body for PostPollsPollID for application/json ContentType.
type PostPollsPollIDJSONRequestBody PostPollsPollIDJSONBody

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody PostTagsJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody PostUsersJSONBody

// PostUsersSigninJSONRequestBody defines body for PostUsersSignin for application/json ContentType.
type PostUsersSigninJSONRequestBody PostUsersSigninJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /polls)
	GetPolls(ctx echo.Context, params GetPollsParams) error

	// (POST /polls)
	PostPolls(ctx echo.Context) error

	// (DELETE /polls/{pollID})
	DeletePollsPollID(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID})
	GetPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID})
	PostPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID}/close)
	PostPollsClose(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID}/comments)
	GetPollsPollIDComments(ctx echo.Context, pollID string, params GetPollsPollIDCommentsParams) error

	// (GET /polls/{pollID}/results)
	GetPollsPollIDResults(ctx echo.Context, pollID string) error

	// (GET /tags)
	GetTags(ctx echo.Context) error

	// (POST /tags)
	PostTags(ctx echo.Context) error

	// (POST /users)
	PostUsers(ctx echo.Context) error

	// (DELETE /users/me)
	DeleteUsersMe(ctx echo.Context) error

	// (GET /users/me)
	GetUsersMe(ctx echo.Context) error

	// (GET /users/me/answers)
	GetUsersMeAnswers(ctx echo.Context) error

	// (GET /users/me/owners)
	GetUsersMeOwners(ctx echo.Context) error

	// (POST /users/signin)
	PostUsersSignin(ctx echo.Context) error

	// (POST /users/signout)
	PostUsersSignout(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPolls converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolls(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "match" -------------

	err = runtime.BindQueryParameter("form", true, false, "match", ctx.QueryParams(), &params.Match)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter match: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPolls(ctx, params)
	return err
}

// PostPolls converts echo context to params.
func (w *ServerInterfaceWrapper) PostPolls(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPolls(ctx)
	return err
}

// DeletePollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePollsPollID(ctx, pollID)
	return err
}

// GetPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPollsPollID(ctx, pollID)
	return err
}

// PostPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPollsPollID(ctx, pollID)
	return err
}

// PostPollsClose converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsClose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPollsClose(ctx, pollID)
	return err
}

// GetPollsPollIDComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsPollIDCommentsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPollsPollIDComments(ctx, pollID, params)
	return err
}

// GetPollsPollIDResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPollsPollIDResults(ctx, pollID)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersMe(ctx)
	return err
}

// GetUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersMe(ctx)
	return err
}

// GetUsersMeAnswers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeAnswers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersMeAnswers(ctx)
	return err
}

// GetUsersMeOwners converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeOwners(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersMeOwners(ctx)
	return err
}

// PostUsersSignin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersSignin(ctx)
	return err
}

// PostUsersSignout converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersSignout(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/polls", wrapper.GetPolls)
	router.POST(baseURL+"/polls", wrapper.PostPolls)
	router.DELETE(baseURL+"/polls/:pollID", wrapper.DeletePollsPollID)
	router.GET(baseURL+"/polls/:pollID", wrapper.GetPollsPollID)
	router.POST(baseURL+"/polls/:pollID", wrapper.PostPollsPollID)
	router.POST(baseURL+"/polls/:pollID/close", wrapper.PostPollsClose)
	router.GET(baseURL+"/polls/:pollID/comments", wrapper.GetPollsPollIDComments)
	router.GET(baseURL+"/polls/:pollID/results", wrapper.GetPollsPollIDResults)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/me", wrapper.DeleteUsersMe)
	router.GET(baseURL+"/users/me", wrapper.GetUsersMe)
	router.GET(baseURL+"/users/me/answers", wrapper.GetUsersMeAnswers)
	router.GET(baseURL+"/users/me/owners", wrapper.GetUsersMeOwners)
	router.POST(baseURL+"/users/signin", wrapper.PostUsersSignin)
	router.POST(baseURL+"/users/signout", wrapper.PostUsersSignout)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tVLtvwEAAP//bSd/sd0vAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
