// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for PollStatus.
const (
	PollStatusLimited PollStatus = "limited"

	PollStatusOpened PollStatus = "opened"

	PollStatusOutdated PollStatus = "outdated"
)

// Defines values for PollType.
const (
	PollTypeRadio PollType = "radio"
)

// Defines values for UserStatusAccsessMode.
const (
	UserStatusAccsessModeCanAnswer UserStatusAccsessMode = "can_answer"

	UserStatusAccsessModeCanAsccessDetails UserStatusAccsessMode = "can_asccess_details"

	UserStatusAccsessModeOnlyBrowsable UserStatusAccsessMode = "only_browsable"
)

// 選択したボタンid配列
type Answer []int

// 選択肢ボタン
type Choice struct {
	// 質問文
	Choice string `json:"choice"`
	Id     string `json:"id"`
}

// 質問idは存在しない。POST /polls/のボディ。
type NewPoll struct {
	// deadlineをpostする、またはq_statusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`
	Question []string   `json:"question"`

	// 初期実装では含まない。
	Tags  *[]string `json:"tags,omitempty"`
	Title string    `json:"title"`
	Type  PollType  `json:"type"`
}

// 質問idは存在しない。POST /polls/のボディ。
type PollBase struct {
	// deadlineをpostする、またはq_statusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`

	// 質問
	Question Questions `json:"question"`

	// 初期実装では含まない。
	Tags  *[]PollTag `json:"tags,omitempty"`
	Title string     `json:"title"`
	Type  PollType   `json:"type"`
}

// PollComment defines model for PollComment.
type PollComment struct {
	// コメント本文
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	User      User      `json:"user"`
}

// PollID defines model for PollID.
type PollID string

// PollResults defines model for PollResults.
type PollResults struct {
	// 回答総数
	Count  *int    `json:"count,omitempty"`
	PollId *PollID `json:"poll_id,omitempty"`

	// 結果
	Result *Results  `json:"result,omitempty"`
	Type   *PollType `json:"type,omitempty"`
}

// 質問の状態
type PollStatus string

// PollSummaries defines model for PollSummaries.
type PollSummaries []PollSummary

// PollSummary defines model for PollSummary.
type PollSummary struct {
	// Embedded fields due to inline allOf schema
	PollId PollID `json:"poll_id"`
	// Embedded struct due to allOf(#/components/schemas/PollBase)
	PollBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	CreatedAt time.Time `json:"created_at"`
	Owner     User      `json:"owner"`

	// 質問の状態
	QStatus PollStatus `json:"q_status"`

	// 質問idに対するユーザーの権限
	UserStatus UserStatus `json:"user_status"`
}

// PollTag defines model for PollTag.
type PollTag struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// PollTags defines model for PollTags.
type PollTags []PollTag

// PollType defines model for PollType.
type PollType string

// PostPollId defines model for PostPollId.
type PostPollId struct {
	// 選択したボタンid配列
	Answer  *Answer `json:"answer,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

// PostTag defines model for PostTag.
type PostTag string

// PostUser defines model for PostUser.
type PostUser struct {
	// アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name     UserName     `json:"name"`
	Password UserPassword `json:"password"`
}

// 質問
type Questions []Choice

// 結果
type Results []struct {
	// Embedded struct due to allOf(#/components/schemas/Choice)
	Choice `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// その選択肢に回答をした人数
	Count int `json:"count"`
}

// User defines model for User.
type User struct {
	// アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name UserName `json:"name"`
	Uuid string   `json:"uuid"`
}

// アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
type UserName string

// UserPassword defines model for UserPassword.
type UserPassword string

// 質問idに対するユーザーの権限
type UserStatus struct {
	// only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
	AccsessMode UserStatusAccsessMode `json:"accsess_mode"`

	// オーナーか
	IsOwner bool `json:"is_owner"`
}

// only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
type UserStatusAccsessMode string

// GetPollsParams defines parameters for GetPolls.
type GetPollsParams struct {
	// 最大質問数
	Limit *int `json:"limit,omitempty"`

	// 質問オフセット
	Offset *int `json:"offset,omitempty"`

	// タイトルの部分一致
	Match *string `json:"match,omitempty"`
}

// PostPollsJSONBody defines parameters for PostPolls.
type PostPollsJSONBody NewPoll

// PostPollsPollIDJSONBody defines parameters for PostPollsPollID.
type PostPollsPollIDJSONBody PostPollId

// GetPollsPollIDCommentsParams defines parameters for GetPollsPollIDComments.
type GetPollsPollIDCommentsParams struct {
	// 最大コメント数
	Max *int `json:"max,omitempty"`
}

// PostTagsJSONBody defines parameters for PostTags.
type PostTagsJSONBody PostTag

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody PostUser

// PostUsersSigninJSONBody defines parameters for PostUsersSignin.
type PostUsersSigninJSONBody PostUser

// PostPollsJSONRequestBody defines body for PostPolls for application/json ContentType.
type PostPollsJSONRequestBody PostPollsJSONBody

// PostPollsPollIDJSONRequestBody defines body for PostPollsPollID for application/json ContentType.
type PostPollsPollIDJSONRequestBody PostPollsPollIDJSONBody

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody PostTagsJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody PostUsersJSONBody

// PostUsersSigninJSONRequestBody defines body for PostUsersSignin for application/json ContentType.
type PostUsersSigninJSONRequestBody PostUsersSigninJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /polls)
	GetPolls(ctx echo.Context, params GetPollsParams) error

	// (POST /polls)
	PostPolls(ctx echo.Context) error

	// (DELETE /polls/{pollID})
	DeletePollsPollID(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID})
	GetPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID})
	PostPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID}/close)
	PostPollsClose(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID}/comments)
	GetPollsPollIDComments(ctx echo.Context, pollID string, params GetPollsPollIDCommentsParams) error

	// (GET /polls/{pollID}/results)
	GetPollsPollIDResults(ctx echo.Context, pollID string) error

	// (GET /tags)
	GetTags(ctx echo.Context) error

	// (POST /tags)
	PostTags(ctx echo.Context) error

	// (POST /users)
	PostUsers(ctx echo.Context) error

	// (DELETE /users/me)
	DeleteUsersMe(ctx echo.Context) error

	// (GET /users/me)
	GetUsersMe(ctx echo.Context) error

	// (GET /users/me/answers)
	GetUsersMeAnswers(ctx echo.Context) error

	// (GET /users/me/owners)
	GetUsersMeOwners(ctx echo.Context) error

	// (POST /users/signin)
	PostUsersSignin(ctx echo.Context) error

	// (POST /users/signout)
	PostUsersSignout(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPolls converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolls(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "match" -------------

	err = runtime.BindQueryParameter("form", true, false, "match", ctx.QueryParams(), &params.Match)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter match: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPolls(ctx, params)
	return err
}

// PostPolls converts echo context to params.
func (w *ServerInterfaceWrapper) PostPolls(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPolls(ctx)
	return err
}

// DeletePollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePollsPollID(ctx, pollID)
	return err
}

// GetPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPollsPollID(ctx, pollID)
	return err
}

// PostPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPollsPollID(ctx, pollID)
	return err
}

// PostPollsClose converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsClose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPollsClose(ctx, pollID)
	return err
}

// GetPollsPollIDComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsPollIDCommentsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPollsPollIDComments(ctx, pollID, params)
	return err
}

// GetPollsPollIDResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPollsPollIDResults(ctx, pollID)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersMe(ctx)
	return err
}

// GetUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersMe(ctx)
	return err
}

// GetUsersMeAnswers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeAnswers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersMeAnswers(ctx)
	return err
}

// GetUsersMeOwners converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeOwners(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersMeOwners(ctx)
	return err
}

// PostUsersSignin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersSignin(ctx)
	return err
}

// PostUsersSignout converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersSignout(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/polls", wrapper.GetPolls)
	router.POST(baseURL+"/polls", wrapper.PostPolls)
	router.DELETE(baseURL+"/polls/:pollID", wrapper.DeletePollsPollID)
	router.GET(baseURL+"/polls/:pollID", wrapper.GetPollsPollID)
	router.POST(baseURL+"/polls/:pollID", wrapper.PostPollsPollID)
	router.POST(baseURL+"/polls/:pollID/close", wrapper.PostPollsClose)
	router.GET(baseURL+"/polls/:pollID/comments", wrapper.GetPollsPollIDComments)
	router.GET(baseURL+"/polls/:pollID/results", wrapper.GetPollsPollIDResults)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/me", wrapper.DeleteUsersMe)
	router.GET(baseURL+"/users/me", wrapper.GetUsersMe)
	router.GET(baseURL+"/users/me/answers", wrapper.GetUsersMeAnswers)
	router.GET(baseURL+"/users/me/owners", wrapper.GetUsersMeOwners)
	router.POST(baseURL+"/users/signin", wrapper.PostUsersSignin)
	router.POST(baseURL+"/users/signout", wrapper.PostUsersSignout)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///7uRucjy8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
