// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for PollStatus.
const (
	Limited  PollStatus = "limited"
	Opened   PollStatus = "opened"
	Outdated PollStatus = "outdated"
)

// Defines values for PollType.
const (
	Radio PollType = "radio"
)

// Defines values for UserStatusAccessMode.
const (
	CanAccessDetails UserStatusAccessMode = "can_access_details"
	CanAnswer        UserStatusAccessMode = "can_answer"
	OnlyBrowsable    UserStatusAccessMode = "only_browsable"
)

// Defines values for WebAuthnAuthenticatorAttachment.
const (
	CrossPlatform WebAuthnAuthenticatorAttachment = "cross-platform"
	Platform      WebAuthnAuthenticatorAttachment = "platform"
)

// Defines values for WebAuthnAuthenticatorAttestationType.
const (
	Direct   WebAuthnAuthenticatorAttestationType = "direct"
	Indirect WebAuthnAuthenticatorAttestationType = "indirect"
	None     WebAuthnAuthenticatorAttestationType = "none"
)

// Defines values for WebAuthnAuthenticatorResidentKeyRequirement.
const (
	Discouraged WebAuthnAuthenticatorResidentKeyRequirement = "discouraged"
	Preferred   WebAuthnAuthenticatorResidentKeyRequirement = "preferred"
	Required    WebAuthnAuthenticatorResidentKeyRequirement = "required"
)

// Defines values for WebAuthnCredentialAlgorithm.
const (
	Minus7 WebAuthnCredentialAlgorithm = -7
)

// Defines values for WebAuthnCredentialType.
const (
	PublicKey WebAuthnCredentialType = "public-key"
)

// Answer 選択したボタンid配列
type Answer = []openapi_types.UUID

// Choice 選択肢ボタン
type Choice struct {
	// Choice 質問文
	Choice string             `json:"choice"`
	Id     openapi_types.UUID `json:"id"`
}

// NewPoll 質問idは存在しない。POST /polls/のボディ。
type NewPoll struct {
	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`
	Question []string   `json:"question"`

	// Tags 初期実装では含まない。
	Tags  *[]string `json:"tags,omitempty"`
	Title string    `json:"title"`
	Type  PollType  `json:"type"`
}

// PollBase 質問idは存在しない。
type PollBase struct {
	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`

	// Question 質問
	Question Questions `json:"question"`

	// Tags 初期実装では含まない。
	// Deprecated:
	Tags  *[]PollTag `json:"tags,omitempty"`
	Title string     `json:"title"`
	Type  PollType   `json:"type"`
}

// PollComment defines model for PollComment.
type PollComment struct {
	// Content コメント本文
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"createdAt"`
}

// PollID defines model for PollID.
type PollID = openapi_types.UUID

// PollResults defines model for PollResults.
type PollResults struct {
	// Count 回答総数
	Count  int      `json:"count"`
	PollId PollID   `json:"pollId"`
	Result []Result `json:"result"`
	Type   PollType `json:"type"`
}

// PollStatus 質問の状態
type PollStatus string

// PollSummaries defines model for PollSummaries.
type PollSummaries = []PollSummary

// PollSummary defines model for PollSummary.
type PollSummary struct {
	CreatedAt time.Time `json:"createdAt"`

	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`
	Owner    User       `json:"owner"`
	PollId   PollID     `json:"pollId"`

	// QStatus 質問の状態
	QStatus PollStatus `json:"qStatus"`

	// Question 質問
	Question Questions `json:"question"`

	// Tags 初期実装では含まない。
	// Deprecated:
	Tags  *[]PollTag `json:"tags,omitempty"`
	Title string     `json:"title"`
	Type  PollType   `json:"type"`

	// UserStatus 質問idに対するユーザーの権限
	UserStatus UserStatus `json:"userStatus"`
}

// PollTag defines model for PollTag.
type PollTag struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// PollTags defines model for PollTags.
type PollTags = []PollTag

// PollType defines model for PollType.
type PollType string

// PostPollId defines model for PostPollId.
type PostPollId struct {
	// Answer 選択したボタンid配列
	Answer  Answer `json:"answer"`
	Comment string `json:"comment"`
}

// PostTag defines model for PostTag.
type PostTag = string

// PostUser defines model for PostUser.
type PostUser struct {
	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name     UserName     `json:"name"`
	Password UserPassword `json:"password"`
}

// Questions 質問
type Questions = []Choice

// Response defines model for Response.
type Response struct {
	// Answer 選択したボタンid配列
	Answer Answer `json:"answer"`

	// Comment コメント本文
	Comment   *string   `json:"comment,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
}

// Result defines model for Result.
type Result struct {
	// Choice 質問文
	Choice string `json:"choice"`

	// Count その選択肢に回答をした人数
	Count int                `json:"count"`
	Id    openapi_types.UUID `json:"id"`
}

// User defines model for User.
type User struct {
	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name UserName           `json:"name"`
	Uuid openapi_types.UUID `json:"uuid"`
}

// UserName アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
type UserName = string

// UserPassword defines model for UserPassword.
type UserPassword = string

// UserStatus 質問idに対するユーザーの権限
type UserStatus struct {
	// AccessMode only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
	AccessMode UserStatusAccessMode `json:"accessMode"`

	// IsOwner オーナーか
	IsOwner bool `json:"isOwner"`
}

// UserStatusAccessMode only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
type UserStatusAccessMode string

// WebAuthnAuthenticatorAttachment defines model for WebAuthnAuthenticatorAttachment.
type WebAuthnAuthenticatorAttachment string

// WebAuthnAuthenticatorAttestationType defines model for WebAuthnAuthenticatorAttestationType.
type WebAuthnAuthenticatorAttestationType string

// WebAuthnAuthenticatorResidentKeyRequirement defines model for WebAuthnAuthenticatorResidentKeyRequirement.
type WebAuthnAuthenticatorResidentKeyRequirement string

// WebAuthnAuthenticatorSelectionCriteria defines model for WebAuthnAuthenticatorSelectionCriteria.
type WebAuthnAuthenticatorSelectionCriteria struct {
	AuthenticatorAttachment *WebAuthnAuthenticatorAttachment             `json:"authenticatorAttachment,omitempty"`
	RequireResidentKey      *bool                                        `json:"requireResidentKey,omitempty"`
	ResidentKey             *WebAuthnAuthenticatorResidentKeyRequirement `json:"residentKey,omitempty"`
}

// WebAuthnChallenge defines model for WebAuthnChallenge.
type WebAuthnChallenge = string

// WebAuthnCredential defines model for WebAuthnCredential.
type WebAuthnCredential struct {
	CreatedAt  time.Time          `json:"createdAt"`
	Id         openapi_types.UUID `json:"id"`
	LastUsedAt time.Time          `json:"lastUsedAt"`
	Name       string             `json:"name"`
}

// WebAuthnCredentialAlgorithm defines model for WebAuthnCredentialAlgorithm.
type WebAuthnCredentialAlgorithm int

// WebAuthnCredentialType defines model for WebAuthnCredentialType.
type WebAuthnCredentialType string

// WebAuthnPubKeyCredParam defines model for WebAuthnPubKeyCredParam.
type WebAuthnPubKeyCredParam struct {
	Alg  WebAuthnCredentialAlgorithm `json:"alg"`
	Type WebAuthnCredentialType      `json:"type"`
}

// WebAuthnPublicKeyCredentialCreation defines model for WebAuthnPublicKeyCredentialCreation.
type WebAuthnPublicKeyCredentialCreation struct {
	Id       string                                      `json:"id"`
	RawId    string                                      `json:"rawId"`
	Response WebAuthnPublicKeyCredentialCreationResponse `json:"response"`
	Type     WebAuthnCredentialType                      `json:"type"`
}

// WebAuthnPublicKeyCredentialCreationOptions defines model for WebAuthnPublicKeyCredentialCreationOptions.
type WebAuthnPublicKeyCredentialCreationOptions struct {
	Attestation            WebAuthnAuthenticatorAttestationType   `json:"attestation"`
	AuthenticatorSelection WebAuthnAuthenticatorSelectionCriteria `json:"authenticatorSelection"`
	Challenge              WebAuthnChallenge                      `json:"challenge"`
	PubKeyCredParams       []WebAuthnPubKeyCredParam              `json:"pubKeyCredParams"`
	Rp                     WebAuthnRelyingParty                   `json:"rp"`
	Timeout                int                                    `json:"timeout"`
	User                   WebAuthnUser                           `json:"user"`
}

// WebAuthnPublicKeyCredentialCreationResponse defines model for WebAuthnPublicKeyCredentialCreationResponse.
type WebAuthnPublicKeyCredentialCreationResponse struct {
	AttestationObject string `json:"attestationObject"`
	ClientDataJSON    string `json:"clientDataJSON"`
}

// WebAuthnPublicKeyCredentialRequestOptions defines model for WebAuthnPublicKeyCredentialRequestOptions.
type WebAuthnPublicKeyCredentialRequestOptions struct {
	Challenge WebAuthnChallenge `json:"challenge"`
	RpId      *string           `json:"rpId,omitempty"`
	Timeout   *int              `json:"timeout,omitempty"`
}

// WebAuthnPublicKeyCredentialRequestResponse defines model for WebAuthnPublicKeyCredentialRequestResponse.
type WebAuthnPublicKeyCredentialRequestResponse struct {
	AuthenticatorData string  `json:"authenticatorData"`
	ClientDataJSON    string  `json:"clientDataJSON"`
	Signature         string  `json:"signature"`
	UserHandle        *string `json:"userHandle,omitempty"`
}

// WebAuthnRelyingParty defines model for WebAuthnRelyingParty.
type WebAuthnRelyingParty struct {
	Id   *string `json:"id,omitempty"`
	Name string  `json:"name"`
}

// WebAuthnUser defines model for WebAuthnUser.
type WebAuthnUser struct {
	// DisplayName アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	DisplayName UserName           `json:"displayName"`
	Id          openapi_types.UUID `json:"id"`

	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name UserName `json:"name"`
}

// GetPollsParams defines parameters for GetPolls.
type GetPollsParams struct {
	// Limit 最大質問数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset 質問オフセット
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Match タイトルの部分一致
	Match *string `form:"match,omitempty" json:"match,omitempty"`
}

// GetPollsPollIDCommentsParams defines parameters for GetPollsPollIDComments.
type GetPollsPollIDCommentsParams struct {
	// Limit 最大コメント取得数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset オフセット
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostPollsJSONRequestBody defines body for PostPolls for application/json ContentType.
type PostPollsJSONRequestBody = NewPoll

// PostPollsPollIDJSONRequestBody defines body for PostPollsPollID for application/json ContentType.
type PostPollsPollIDJSONRequestBody = PostPollId

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody = PostTag

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUser

// PostUsersSigninJSONRequestBody defines body for PostUsersSignin for application/json ContentType.
type PostUsersSigninJSONRequestBody = PostUser

// PostWebauthnAuthenticateFinishJSONRequestBody defines body for PostWebauthnAuthenticateFinish for application/json ContentType.
type PostWebauthnAuthenticateFinishJSONRequestBody = WebAuthnPublicKeyCredentialRequestResponse

// PostWebauthnResisterFinishJSONRequestBody defines body for PostWebauthnResisterFinish for application/json ContentType.
type PostWebauthnResisterFinishJSONRequestBody = WebAuthnPublicKeyCredentialCreation

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /polls)
	GetPolls(ctx echo.Context, params GetPollsParams) error

	// (POST /polls)
	PostPolls(ctx echo.Context) error

	// (DELETE /polls/{pollID})
	DeletePollsPollID(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID})
	GetPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID})
	PostPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID}/close)
	PostPollsClose(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID}/comments)
	GetPollsPollIDComments(ctx echo.Context, pollID string, params GetPollsPollIDCommentsParams) error

	// (GET /polls/{pollID}/results)
	GetPollsPollIDResults(ctx echo.Context, pollID string) error

	// (GET /tags)
	GetTags(ctx echo.Context) error

	// (POST /tags)
	PostTags(ctx echo.Context) error

	// (POST /users)
	PostUsers(ctx echo.Context) error

	// (DELETE /users/me)
	DeleteUsersMe(ctx echo.Context) error

	// (GET /users/me)
	GetUsersMe(ctx echo.Context) error

	// (GET /users/me/answers)
	GetUsersMeAnswers(ctx echo.Context) error

	// (GET /users/me/owners)
	GetUsersMeOwners(ctx echo.Context) error

	// (POST /users/signin)
	PostUsersSignin(ctx echo.Context) error

	// (POST /users/signout)
	PostUsersSignout(ctx echo.Context) error
	// webauthnの認証終了
	// (POST /webauthn/authenticate/finish)
	PostWebauthnAuthenticateFinish(ctx echo.Context) error
	// webauthnの認証開始
	// (POST /webauthn/authenticate/start)
	PostWebauthnAuthenticateStart(ctx echo.Context) error
	// webauthnの登録情報削除
	// (DELETE /webauthn/credentials)
	DeleteWebauthnCredentials(ctx echo.Context) error
	// webauthnの登録情報一覧
	// (GET /webauthn/credentials)
	GetWebauthnCredentials(ctx echo.Context) error
	// webauthnの公開鍵登録終了
	// (POST /webauthn/resister/finish)
	PostWebauthnResisterFinish(ctx echo.Context) error
	// webauthnの公開鍵登録開始
	// (POST /webauthn/resister/start)
	PostWebauthnResisterStart(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPolls converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolls(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "match" -------------

	err = runtime.BindQueryParameter("form", true, false, "match", ctx.QueryParams(), &params.Match)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter match: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPolls(ctx, params)
	return err
}

// PostPolls converts echo context to params.
func (w *ServerInterfaceWrapper) PostPolls(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPolls(ctx)
	return err
}

// DeletePollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePollsPollID(ctx, pollID)
	return err
}

// GetPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollID(ctx, pollID)
	return err
}

// PostPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPollsPollID(ctx, pollID)
	return err
}

// PostPollsClose converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsClose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPollsClose(ctx, pollID)
	return err
}

// GetPollsPollIDComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsPollIDCommentsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollIDComments(ctx, pollID, params)
	return err
}

// GetPollsPollIDResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollIDResults(ctx, pollID)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersMe(ctx)
	return err
}

// GetUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMe(ctx)
	return err
}

// GetUsersMeAnswers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeAnswers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMeAnswers(ctx)
	return err
}

// GetUsersMeOwners converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeOwners(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMeOwners(ctx)
	return err
}

// PostUsersSignin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignin(ctx)
	return err
}

// PostUsersSignout converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignout(ctx)
	return err
}

// PostWebauthnAuthenticateFinish converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnAuthenticateFinish(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnAuthenticateFinish(ctx)
	return err
}

// PostWebauthnAuthenticateStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnAuthenticateStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnAuthenticateStart(ctx)
	return err
}

// DeleteWebauthnCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWebauthnCredentials(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWebauthnCredentials(ctx)
	return err
}

// GetWebauthnCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetWebauthnCredentials(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWebauthnCredentials(ctx)
	return err
}

// PostWebauthnResisterFinish converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnResisterFinish(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnResisterFinish(ctx)
	return err
}

// PostWebauthnResisterStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnResisterStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnResisterStart(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/polls", wrapper.GetPolls)
	router.POST(baseURL+"/polls", wrapper.PostPolls)
	router.DELETE(baseURL+"/polls/:pollID", wrapper.DeletePollsPollID)
	router.GET(baseURL+"/polls/:pollID", wrapper.GetPollsPollID)
	router.POST(baseURL+"/polls/:pollID", wrapper.PostPollsPollID)
	router.POST(baseURL+"/polls/:pollID/close", wrapper.PostPollsClose)
	router.GET(baseURL+"/polls/:pollID/comments", wrapper.GetPollsPollIDComments)
	router.GET(baseURL+"/polls/:pollID/results", wrapper.GetPollsPollIDResults)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/me", wrapper.DeleteUsersMe)
	router.GET(baseURL+"/users/me", wrapper.GetUsersMe)
	router.GET(baseURL+"/users/me/answers", wrapper.GetUsersMeAnswers)
	router.GET(baseURL+"/users/me/owners", wrapper.GetUsersMeOwners)
	router.POST(baseURL+"/users/signin", wrapper.PostUsersSignin)
	router.POST(baseURL+"/users/signout", wrapper.PostUsersSignout)
	router.POST(baseURL+"/webauthn/authenticate/finish", wrapper.PostWebauthnAuthenticateFinish)
	router.POST(baseURL+"/webauthn/authenticate/start", wrapper.PostWebauthnAuthenticateStart)
	router.DELETE(baseURL+"/webauthn/credentials", wrapper.DeleteWebauthnCredentials)
	router.GET(baseURL+"/webauthn/credentials", wrapper.GetWebauthnCredentials)
	router.POST(baseURL+"/webauthn/resister/finish", wrapper.PostWebauthnResisterFinish)
	router.POST(baseURL+"/webauthn/resister/start", wrapper.PostWebauthnResisterStart)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
