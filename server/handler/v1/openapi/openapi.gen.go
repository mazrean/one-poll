// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for PollStatus.
const (
	PollStatusLimited PollStatus = "limited"

	PollStatusOpened PollStatus = "opened"

	PollStatusOutdated PollStatus = "outdated"
)

// Defines values for PollType.
const (
	PollTypeRadio PollType = "radio"
)

// Defines values for UserStatusAccsessMode.
const (
	UserStatusAccsessModeCanAccessDetails UserStatusAccsessMode = "can_access_details"

	UserStatusAccsessModeCanAnswer UserStatusAccsessMode = "can_answer"

	UserStatusAccsessModeOnlyBrowsable UserStatusAccsessMode = "only_browsable"
)

// 選択したボタンid配列
type Answer []int

// 選択肢ボタン
type Choice struct {
	// 質問文
	Choice string `json:"choice"`
	Id     string `json:"id"`
}

// 質問idは存在しない。POST /polls/のボディ。
type NewPoll struct {
	// deadlineをpostする、またはq_statusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`
	Question []string   `json:"question"`

	// 初期実装では含まない。
	Tags  *[]string `json:"tags,omitempty"`
	Title string    `json:"title"`
	Type  PollType  `json:"type"`
}

// 質問idは存在しない。POST /polls/のボディ。
type PollBase struct {
	// deadlineをpostする、またはq_statusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`

	// 質問
	Question Questions `json:"question"`

	// 初期実装では含まない。
	Tags  *[]PollTag `json:"tags,omitempty"`
	Title string     `json:"title"`
	Type  PollType   `json:"type"`
}

// PollComment defines model for PollComment.
type PollComment struct {
	// コメント本文
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	User      User      `json:"user"`
}

// PollID defines model for PollID.
type PollID string

// PollResults defines model for PollResults.
type PollResults struct {
	// 回答総数
	Count  *int    `json:"count,omitempty"`
	PollId *PollID `json:"poll_id,omitempty"`

	// 結果
	Result *Results  `json:"result,omitempty"`
	Type   *PollType `json:"type,omitempty"`
}

// 質問の状態
type PollStatus string

// PollSummaries defines model for PollSummaries.
type PollSummaries []PollSummary

// PollSummary defines model for PollSummary.
type PollSummary struct {
	// Embedded fields due to inline allOf schema
	PollId PollID `json:"poll_id"`
	// Embedded struct due to allOf(#/components/schemas/PollBase)
	PollBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	CreatedAt time.Time `json:"created_at"`
	Owner     User      `json:"owner"`

	// 質問の状態
	QStatus PollStatus `json:"q_status"`

	// 質問idに対するユーザーの権限
	UserStatus UserStatus `json:"user_status"`
}

// PollTag defines model for PollTag.
type PollTag struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// PollTags defines model for PollTags.
type PollTags []PollTag

// PollType defines model for PollType.
type PollType string

// PostPollId defines model for PostPollId.
type PostPollId struct {
	// 選択したボタンid配列
	Answer  *Answer `json:"answer,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

// PostTag defines model for PostTag.
type PostTag string

// PostUser defines model for PostUser.
type PostUser struct {
	// アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name     UserName     `json:"name"`
	Password UserPassword `json:"password"`
}

// 質問
type Questions []Choice

// 結果
type Results []struct {
	// Embedded struct due to allOf(#/components/schemas/Choice)
	Choice `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// その選択肢に回答をした人数
	Count int `json:"count"`
}

// User defines model for User.
type User struct {
	// アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name UserName `json:"name"`
	Uuid string   `json:"uuid"`
}

// アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
type UserName string

// UserPassword defines model for UserPassword.
type UserPassword string

// 質問idに対するユーザーの権限
type UserStatus struct {
	// only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
	AccsessMode UserStatusAccsessMode `json:"accsess_mode"`

	// オーナーか
	IsOwner bool `json:"is_owner"`
}

// only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
type UserStatusAccsessMode string

// GetPollsParams defines parameters for GetPolls.
type GetPollsParams struct {
	// 最大質問数
	Limit *int `json:"limit,omitempty"`

	// 質問オフセット
	Offset *int `json:"offset,omitempty"`

	// タイトルの部分一致
	Match *string `json:"match,omitempty"`
}

// PostPollsJSONBody defines parameters for PostPolls.
type PostPollsJSONBody NewPoll

// PostPollsPollIDJSONBody defines parameters for PostPollsPollID.
type PostPollsPollIDJSONBody PostPollId

// GetPollsPollIDCommentsParams defines parameters for GetPollsPollIDComments.
type GetPollsPollIDCommentsParams struct {
	// 最大コメント数
	Max *int `json:"max,omitempty"`
}

// PostTagsJSONBody defines parameters for PostTags.
type PostTagsJSONBody PostTag

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody PostUser

// PostUsersSigninJSONBody defines parameters for PostUsersSignin.
type PostUsersSigninJSONBody PostUser

// PostPollsJSONRequestBody defines body for PostPolls for application/json ContentType.
type PostPollsJSONRequestBody PostPollsJSONBody

// PostPollsPollIDJSONRequestBody defines body for PostPollsPollID for application/json ContentType.
type PostPollsPollIDJSONRequestBody PostPollsPollIDJSONBody

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody PostTagsJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody PostUsersJSONBody

// PostUsersSigninJSONRequestBody defines body for PostUsersSignin for application/json ContentType.
type PostUsersSigninJSONRequestBody PostUsersSigninJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /polls)
	GetPolls(ctx echo.Context, params GetPollsParams) error

	// (POST /polls)
	PostPolls(ctx echo.Context) error

	// (DELETE /polls/{pollID})
	DeletePollsPollID(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID})
	GetPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID})
	PostPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID}/close)
	PostPollsClose(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID}/comments)
	GetPollsPollIDComments(ctx echo.Context, pollID string, params GetPollsPollIDCommentsParams) error

	// (GET /polls/{pollID}/results)
	GetPollsPollIDResults(ctx echo.Context, pollID string) error

	// (GET /tags)
	GetTags(ctx echo.Context) error

	// (POST /tags)
	PostTags(ctx echo.Context) error

	// (POST /users)
	PostUsers(ctx echo.Context) error

	// (DELETE /users/me)
	DeleteUsersMe(ctx echo.Context) error

	// (GET /users/me)
	GetUsersMe(ctx echo.Context) error

	// (GET /users/me/answers)
	GetUsersMeAnswers(ctx echo.Context) error

	// (GET /users/me/owners)
	GetUsersMeOwners(ctx echo.Context) error

	// (POST /users/signin)
	PostUsersSignin(ctx echo.Context) error

	// (POST /users/signout)
	PostUsersSignout(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPolls converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolls(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "match" -------------

	err = runtime.BindQueryParameter("form", true, false, "match", ctx.QueryParams(), &params.Match)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter match: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPolls(ctx, params)
	return err
}

// PostPolls converts echo context to params.
func (w *ServerInterfaceWrapper) PostPolls(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPolls(ctx)
	return err
}

// DeletePollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePollsPollID(ctx, pollID)
	return err
}

// GetPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPollsPollID(ctx, pollID)
	return err
}

// PostPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPollsPollID(ctx, pollID)
	return err
}

// PostPollsClose converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsClose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPollsClose(ctx, pollID)
	return err
}

// GetPollsPollIDComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsPollIDCommentsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPollsPollIDComments(ctx, pollID, params)
	return err
}

// GetPollsPollIDResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pollID", runtime.ParamLocationPath, ctx.Param("pollID"), &pollID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPollsPollIDResults(ctx, pollID)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersMe(ctx)
	return err
}

// GetUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersMe(ctx)
	return err
}

// GetUsersMeAnswers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeAnswers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersMeAnswers(ctx)
	return err
}

// GetUsersMeOwners converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeOwners(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersMeOwners(ctx)
	return err
}

// PostUsersSignin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersSignin(ctx)
	return err
}

// PostUsersSignout converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersSignout(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/polls", wrapper.GetPolls)
	router.POST(baseURL+"/polls", wrapper.PostPolls)
	router.DELETE(baseURL+"/polls/:pollID", wrapper.DeletePollsPollID)
	router.GET(baseURL+"/polls/:pollID", wrapper.GetPollsPollID)
	router.POST(baseURL+"/polls/:pollID", wrapper.PostPollsPollID)
	router.POST(baseURL+"/polls/:pollID/close", wrapper.PostPollsClose)
	router.GET(baseURL+"/polls/:pollID/comments", wrapper.GetPollsPollIDComments)
	router.GET(baseURL+"/polls/:pollID/results", wrapper.GetPollsPollIDResults)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/me", wrapper.DeleteUsersMe)
	router.GET(baseURL+"/users/me", wrapper.GetUsersMe)
	router.GET(baseURL+"/users/me/answers", wrapper.GetUsersMeAnswers)
	router.GET(baseURL+"/users/me/owners", wrapper.GetUsersMeOwners)
	router.POST(baseURL+"/users/signin", wrapper.PostUsersSignin)
	router.POST(baseURL+"/users/signout", wrapper.PostUsersSignout)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vwEAAP//+7sS3ZgvAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
