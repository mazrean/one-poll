// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for PollStatus.
const (
	Limited  PollStatus = "limited"
	Opened   PollStatus = "opened"
	Outdated PollStatus = "outdated"
)

// Defines values for PollType.
const (
	Radio PollType = "radio"
)

// Defines values for UserStatusAccessMode.
const (
	CanAccessDetails UserStatusAccessMode = "can_access_details"
	CanAnswer        UserStatusAccessMode = "can_answer"
	OnlyBrowsable    UserStatusAccessMode = "only_browsable"
)

// Defines values for WebAuthnAuthenticatorAttachment.
const (
	CrossPlatform WebAuthnAuthenticatorAttachment = "cross-platform"
	Platform      WebAuthnAuthenticatorAttachment = "platform"
)

// Defines values for WebAuthnAuthenticatorAttestationType.
const (
	Direct   WebAuthnAuthenticatorAttestationType = "direct"
	Indirect WebAuthnAuthenticatorAttestationType = "indirect"
	None     WebAuthnAuthenticatorAttestationType = "none"
)

// Defines values for WebAuthnAuthenticatorResidentKeyRequirement.
const (
	Discouraged WebAuthnAuthenticatorResidentKeyRequirement = "discouraged"
	Preferred   WebAuthnAuthenticatorResidentKeyRequirement = "preferred"
	Required    WebAuthnAuthenticatorResidentKeyRequirement = "required"
)

// Defines values for WebAuthnCredentialAlgorithm.
const (
	Minus7 WebAuthnCredentialAlgorithm = -7
)

// Defines values for WebAuthnCredentialType.
const (
	PublicKey WebAuthnCredentialType = "public-key"
)

// Answer 選択したボタンid配列
type Answer = []openapi_types.UUID

// Choice 選択肢ボタン
type Choice struct {
	// Choice 質問文
	Choice string             `json:"choice"`
	Id     openapi_types.UUID `json:"id"`
}

// NewPoll 質問idは存在しない。POST /polls/のボディ。
type NewPoll struct {
	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`
	Question []string   `json:"question"`

	// Tags 初期実装では含まない。
	Tags  *[]string `json:"tags,omitempty"`
	Title string    `json:"title"`
	Type  PollType  `json:"type"`
}

// PollBase 質問idは存在しない。
type PollBase struct {
	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`

	// Question 質問
	Question Questions `json:"question"`

	// Tags 初期実装では含まない。
	// Deprecated:
	Tags  *[]PollTag `json:"tags,omitempty"`
	Title string     `json:"title"`
	Type  PollType   `json:"type"`
}

// PollComment defines model for PollComment.
type PollComment struct {
	// Content コメント本文
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"createdAt"`
}

// PollID defines model for PollID.
type PollID = openapi_types.UUID

// PollResults defines model for PollResults.
type PollResults struct {
	// Count 回答総数
	Count  int      `json:"count"`
	PollId PollID   `json:"pollId"`
	Result []Result `json:"result"`
	Type   PollType `json:"type"`
}

// PollStatus 質問の状態
type PollStatus string

// PollSummaries defines model for PollSummaries.
type PollSummaries = []PollSummary

// PollSummary defines model for PollSummary.
type PollSummary struct {
	CreatedAt time.Time `json:"createdAt"`

	// Deadline deadlineをpostする、またはqStatusがlimitedの時、存在する。回答締め切り時刻。
	Deadline *time.Time `json:"deadline,omitempty"`
	Owner    User       `json:"owner"`
	PollId   PollID     `json:"pollId"`

	// QStatus 質問の状態
	QStatus PollStatus `json:"qStatus"`

	// Question 質問
	Question Questions `json:"question"`

	// Tags 初期実装では含まない。
	// Deprecated:
	Tags  *[]PollTag `json:"tags,omitempty"`
	Title string     `json:"title"`
	Type  PollType   `json:"type"`

	// UserStatus 質問idに対するユーザーの権限
	UserStatus UserStatus `json:"userStatus"`
}

// PollTag defines model for PollTag.
type PollTag struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// PollTags defines model for PollTags.
type PollTags = []PollTag

// PollType defines model for PollType.
type PollType string

// PostPollId defines model for PostPollId.
type PostPollId struct {
	// Answer 選択したボタンid配列
	Answer  Answer `json:"answer"`
	Comment string `json:"comment"`
}

// PostTag defines model for PostTag.
type PostTag = string

// PostUser defines model for PostUser.
type PostUser struct {
	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name     UserName     `json:"name"`
	Password UserPassword `json:"password"`
}

// Questions 質問
type Questions = []Choice

// Response defines model for Response.
type Response struct {
	// Answer 選択したボタンid配列
	Answer Answer `json:"answer"`

	// Comment コメント本文
	Comment   *string   `json:"comment,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
}

// Result defines model for Result.
type Result struct {
	// Choice 質問文
	Choice string `json:"choice"`

	// Count その選択肢に回答をした人数
	Count int                `json:"count"`
	Id    openapi_types.UUID `json:"id"`
}

// User defines model for User.
type User struct {
	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name UserName           `json:"name"`
	Uuid openapi_types.UUID `json:"uuid"`
}

// UserName アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
type UserName = string

// UserPassword defines model for UserPassword.
type UserPassword = string

// UserStatus 質問idに対するユーザーの権限
type UserStatus struct {
	// AccessMode only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
	AccessMode UserStatusAccessMode `json:"accessMode"`

	// IsOwner オーナーか
	IsOwner bool `json:"isOwner"`
}

// UserStatusAccessMode only_browable 質問の閲覧　can_answer 解答できる　can_access_details 結果の表示
type UserStatusAccessMode string

// WebAuthnAuthenticatorAttachment defines model for WebAuthnAuthenticatorAttachment.
type WebAuthnAuthenticatorAttachment string

// WebAuthnAuthenticatorAttestationType defines model for WebAuthnAuthenticatorAttestationType.
type WebAuthnAuthenticatorAttestationType string

// WebAuthnAuthenticatorResidentKeyRequirement defines model for WebAuthnAuthenticatorResidentKeyRequirement.
type WebAuthnAuthenticatorResidentKeyRequirement string

// WebAuthnAuthenticatorSelectionCriteria defines model for WebAuthnAuthenticatorSelectionCriteria.
type WebAuthnAuthenticatorSelectionCriteria struct {
	AuthenticatorAttachment *WebAuthnAuthenticatorAttachment             `json:"authenticatorAttachment,omitempty"`
	RequireResidentKey      *bool                                        `json:"requireResidentKey,omitempty"`
	ResidentKey             *WebAuthnAuthenticatorResidentKeyRequirement `json:"residentKey,omitempty"`
}

// WebAuthnChallenge defines model for WebAuthnChallenge.
type WebAuthnChallenge = string

// WebAuthnCredential defines model for WebAuthnCredential.
type WebAuthnCredential struct {
	CreatedAt  time.Time          `json:"createdAt"`
	Id         openapi_types.UUID `json:"id"`
	LastUsedAt time.Time          `json:"lastUsedAt"`
	Name       string             `json:"name"`
}

// WebAuthnCredentialAlgorithm defines model for WebAuthnCredentialAlgorithm.
type WebAuthnCredentialAlgorithm int

// WebAuthnCredentialBase defines model for WebAuthnCredentialBase.
type WebAuthnCredentialBase struct {
	Id   string                 `json:"id"`
	Type WebAuthnCredentialType `json:"type"`
}

// WebAuthnCredentialType defines model for WebAuthnCredentialType.
type WebAuthnCredentialType string

// WebAuthnPubKeyCredParam defines model for WebAuthnPubKeyCredParam.
type WebAuthnPubKeyCredParam struct {
	Alg  WebAuthnCredentialAlgorithm `json:"alg"`
	Type WebAuthnCredentialType      `json:"type"`
}

// WebAuthnPublicKeyCredentialCreation defines model for WebAuthnPublicKeyCredentialCreation.
type WebAuthnPublicKeyCredentialCreation struct {
	Id       string                                      `json:"id"`
	RawId    string                                      `json:"rawId"`
	Response WebAuthnPublicKeyCredentialCreationResponse `json:"response"`
	Type     WebAuthnCredentialType                      `json:"type"`
}

// WebAuthnPublicKeyCredentialCreationOptions defines model for WebAuthnPublicKeyCredentialCreationOptions.
type WebAuthnPublicKeyCredentialCreationOptions struct {
	Attestation            WebAuthnAuthenticatorAttestationType   `json:"attestation"`
	AuthenticatorSelection WebAuthnAuthenticatorSelectionCriteria `json:"authenticatorSelection"`
	Challenge              WebAuthnChallenge                      `json:"challenge"`
	ExcludeCredentials     *[]WebAuthnCredentialBase              `json:"excludeCredentials,omitempty"`
	PubKeyCredParams       []WebAuthnPubKeyCredParam              `json:"pubKeyCredParams"`
	Rp                     WebAuthnRelyingParty                   `json:"rp"`
	Timeout                int                                    `json:"timeout"`
	User                   WebAuthnUser                           `json:"user"`
}

// WebAuthnPublicKeyCredentialCreationResponse defines model for WebAuthnPublicKeyCredentialCreationResponse.
type WebAuthnPublicKeyCredentialCreationResponse struct {
	AttestationObject string `json:"attestationObject"`
	ClientDataJSON    string `json:"clientDataJSON"`
}

// WebAuthnPublicKeyCredentialRequest defines model for WebAuthnPublicKeyCredentialRequest.
type WebAuthnPublicKeyCredentialRequest struct {
	Id       string                                     `json:"id"`
	RawId    string                                     `json:"rawId"`
	Response WebAuthnPublicKeyCredentialRequestResponse `json:"response"`
	Type     WebAuthnCredentialType                     `json:"type"`
}

// WebAuthnPublicKeyCredentialRequestOptions defines model for WebAuthnPublicKeyCredentialRequestOptions.
type WebAuthnPublicKeyCredentialRequestOptions struct {
	Challenge WebAuthnChallenge `json:"challenge"`
	RpId      *string           `json:"rpId,omitempty"`
	Timeout   *int              `json:"timeout,omitempty"`
}

// WebAuthnPublicKeyCredentialRequestResponse defines model for WebAuthnPublicKeyCredentialRequestResponse.
type WebAuthnPublicKeyCredentialRequestResponse struct {
	AuthenticatorData string  `json:"authenticatorData"`
	ClientDataJSON    string  `json:"clientDataJSON"`
	Signature         string  `json:"signature"`
	UserHandle        *string `json:"userHandle,omitempty"`
}

// WebAuthnRelyingParty defines model for WebAuthnRelyingParty.
type WebAuthnRelyingParty struct {
	Id   *string `json:"id,omitempty"`
	Name string  `json:"name"`
}

// WebAuthnUser defines model for WebAuthnUser.
type WebAuthnUser struct {
	// DisplayName アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	DisplayName UserName           `json:"displayName"`
	Id          openapi_types.UUID `json:"id"`

	// Name アカウント名。uuidで管理されるが、ユーザー視点の観点で重複を許さない
	Name UserName `json:"name"`
}

// GetPollsParams defines parameters for GetPolls.
type GetPollsParams struct {
	// Limit 最大質問数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset 質問オフセット
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Match タイトルの部分一致
	Match *string `form:"match,omitempty" json:"match,omitempty"`

	// Public 公開情報のみ。キャッシュが効くため、応答速度が速い。
	Public *bool `form:"public,omitempty" json:"public,omitempty"`
}

// GetPollsPollIDCommentsParams defines parameters for GetPollsPollIDComments.
type GetPollsPollIDCommentsParams struct {
	// Limit 最大コメント取得数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset オフセット
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostPollsJSONRequestBody defines body for PostPolls for application/json ContentType.
type PostPollsJSONRequestBody = NewPoll

// PostPollsPollIDJSONRequestBody defines body for PostPollsPollID for application/json ContentType.
type PostPollsPollIDJSONRequestBody = PostPollId

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody = PostTag

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUser

// PostUsersSigninJSONRequestBody defines body for PostUsersSignin for application/json ContentType.
type PostUsersSigninJSONRequestBody = PostUser

// PostWebauthnAuthenticateFinishJSONRequestBody defines body for PostWebauthnAuthenticateFinish for application/json ContentType.
type PostWebauthnAuthenticateFinishJSONRequestBody = WebAuthnPublicKeyCredentialRequest

// PostWebauthnResisterFinishJSONRequestBody defines body for PostWebauthnResisterFinish for application/json ContentType.
type PostWebauthnResisterFinishJSONRequestBody = WebAuthnPublicKeyCredentialCreation

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /polls)
	GetPolls(ctx echo.Context, params GetPollsParams) error

	// (POST /polls)
	PostPolls(ctx echo.Context) error

	// (DELETE /polls/{pollID})
	DeletePollsPollID(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID})
	GetPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID})
	PostPollsPollID(ctx echo.Context, pollID string) error

	// (POST /polls/{pollID}/close)
	PostPollsClose(ctx echo.Context, pollID string) error

	// (GET /polls/{pollID}/comments)
	GetPollsPollIDComments(ctx echo.Context, pollID string, params GetPollsPollIDCommentsParams) error

	// (GET /polls/{pollID}/results)
	GetPollsPollIDResults(ctx echo.Context, pollID string) error

	// (GET /tags)
	GetTags(ctx echo.Context) error

	// (POST /tags)
	PostTags(ctx echo.Context) error

	// (POST /users)
	PostUsers(ctx echo.Context) error

	// (DELETE /users/me)
	DeleteUsersMe(ctx echo.Context) error

	// (GET /users/me)
	GetUsersMe(ctx echo.Context) error

	// (GET /users/me/answers)
	GetUsersMeAnswers(ctx echo.Context) error

	// (GET /users/me/owners)
	GetUsersMeOwners(ctx echo.Context) error

	// (POST /users/signin)
	PostUsersSignin(ctx echo.Context) error

	// (POST /users/signout)
	PostUsersSignout(ctx echo.Context) error
	// webauthnの認証終了
	// (POST /webauthn/authenticate/finish)
	PostWebauthnAuthenticateFinish(ctx echo.Context) error
	// webauthnの認証開始
	// (POST /webauthn/authenticate/start)
	PostWebauthnAuthenticateStart(ctx echo.Context) error
	// webauthnの登録情報一覧
	// (GET /webauthn/credentials)
	GetWebauthnCredentials(ctx echo.Context) error
	// webauthnの登録情報削除
	// (DELETE /webauthn/credentials/{credentialID})
	DeleteWebauthnCredentials(ctx echo.Context, credentialID openapi_types.UUID) error
	// webauthnの公開鍵登録終了
	// (POST /webauthn/resister/finish)
	PostWebauthnResisterFinish(ctx echo.Context) error
	// webauthnの公開鍵登録開始
	// (POST /webauthn/resister/start)
	PostWebauthnResisterStart(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPolls converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolls(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "match" -------------

	err = runtime.BindQueryParameter("form", true, false, "match", ctx.QueryParams(), &params.Match)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter match: %s", err))
	}

	// ------------- Optional query parameter "public" -------------

	err = runtime.BindQueryParameter("form", true, false, "public", ctx.QueryParams(), &params.Public)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter public: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPolls(ctx, params)
	return err
}

// PostPolls converts echo context to params.
func (w *ServerInterfaceWrapper) PostPolls(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPolls(ctx)
	return err
}

// DeletePollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePollsPollID(ctx, pollID)
	return err
}

// GetPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollID(ctx, pollID)
	return err
}

// PostPollsPollID converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsPollID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPollsPollID(ctx, pollID)
	return err
}

// PostPollsClose converts echo context to params.
func (w *ServerInterfaceWrapper) PostPollsClose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPollsClose(ctx, pollID)
	return err
}

// GetPollsPollIDComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPollsPollIDCommentsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollIDComments(ctx, pollID, params)
	return err
}

// GetPollsPollIDResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetPollsPollIDResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pollID" -------------
	var pollID string

	err = runtime.BindStyledParameterWithOptions("simple", "pollID", ctx.Param("pollID"), &pollID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pollID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPollsPollIDResults(ctx, pollID)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersMe(ctx)
	return err
}

// GetUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMe(ctx)
	return err
}

// GetUsersMeAnswers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeAnswers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMeAnswers(ctx)
	return err
}

// GetUsersMeOwners converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMeOwners(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMeOwners(ctx)
	return err
}

// PostUsersSignin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignin(ctx)
	return err
}

// PostUsersSignout converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignout(ctx)
	return err
}

// PostWebauthnAuthenticateFinish converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnAuthenticateFinish(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnAuthenticateFinish(ctx)
	return err
}

// PostWebauthnAuthenticateStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnAuthenticateStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnAuthenticateStart(ctx)
	return err
}

// GetWebauthnCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetWebauthnCredentials(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWebauthnCredentials(ctx)
	return err
}

// DeleteWebauthnCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWebauthnCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "credentialID" -------------
	var credentialID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "credentialID", ctx.Param("credentialID"), &credentialID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWebauthnCredentials(ctx, credentialID)
	return err
}

// PostWebauthnResisterFinish converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnResisterFinish(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnResisterFinish(ctx)
	return err
}

// PostWebauthnResisterStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostWebauthnResisterStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWebauthnResisterStart(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/polls", wrapper.GetPolls)
	router.POST(baseURL+"/polls", wrapper.PostPolls)
	router.DELETE(baseURL+"/polls/:pollID", wrapper.DeletePollsPollID)
	router.GET(baseURL+"/polls/:pollID", wrapper.GetPollsPollID)
	router.POST(baseURL+"/polls/:pollID", wrapper.PostPollsPollID)
	router.POST(baseURL+"/polls/:pollID/close", wrapper.PostPollsClose)
	router.GET(baseURL+"/polls/:pollID/comments", wrapper.GetPollsPollIDComments)
	router.GET(baseURL+"/polls/:pollID/results", wrapper.GetPollsPollIDResults)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/me", wrapper.DeleteUsersMe)
	router.GET(baseURL+"/users/me", wrapper.GetUsersMe)
	router.GET(baseURL+"/users/me/answers", wrapper.GetUsersMeAnswers)
	router.GET(baseURL+"/users/me/owners", wrapper.GetUsersMeOwners)
	router.POST(baseURL+"/users/signin", wrapper.PostUsersSignin)
	router.POST(baseURL+"/users/signout", wrapper.PostUsersSignout)
	router.POST(baseURL+"/webauthn/authenticate/finish", wrapper.PostWebauthnAuthenticateFinish)
	router.POST(baseURL+"/webauthn/authenticate/start", wrapper.PostWebauthnAuthenticateStart)
	router.GET(baseURL+"/webauthn/credentials", wrapper.GetWebauthnCredentials)
	router.DELETE(baseURL+"/webauthn/credentials/:credentialID", wrapper.DeleteWebauthnCredentials)
	router.POST(baseURL+"/webauthn/resister/finish", wrapper.PostWebauthnResisterFinish)
	router.POST(baseURL+"/webauthn/resister/start", wrapper.PostWebauthnResisterStart)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xc23ITR/p/Far//0sJyQcI6M4xm6w3G+y1oVIVykW1NW17sqMZMdPCOC5VaUYBezEU",
	"FBvMUmtCEohtTBAkhARINjxMI1l+i63unvP0jFrGDsneUJLV0/0df9+hv2EJlI1K1dCRji1QWgJWeR5V",
	"IPs4olsLyKSfFGSVTbWKVUMHJbBrP+9c/oLYt4h9lzTXifOKNJ+qyu7Fq+2VWyAHVIwqbINZw6xADEqg",
	"VlMVkAN4sYpACVjYVPU5UM+BiqqP8cUDOYBVrNGf3WP95dA04SJdPTpvqGWURk/X+donBuRA1TSqyMQq",
	"YpSUUx7tPt1u37zWWVsGOVCBF/6K9Dk8D0pDxSIjzvs+IKBdVSRYrOeAic7VVBMpoHQGsCUuLdMBxy5j",
	"/tPGzCeojEEOXMijC7BS1TgT7uf8QJgj7yhOUJGeeCGv6hiZOtRAaRZqFqrnwEm0MGFoWpoEVIXYj9uP",
	"/tVe32J63Sb2Z6ThTIxPnTpUqBqaZhWI3aLybS4T5x5pOAkRKwgqmqoLhOz9QpwbVcPCxL5NnFXSsIn9",
	"K7Ug+/G5KQxxzSL2FU2tqBgpxG51bjukYXsk8Sec9r+/2Hn0+c5PXxLHbq8sE+dy57bTXvmZ0+PrQoEY",
	"5bFaQSKbO1dDFidsKbDUHpYZM0QM56wkm+2VO531u+3W3e69i8TepAK9/pDx6Eoz7BqJAxNncNtY6tcs",
	"+R+WwP+baBaUwP8VAvcuuL5doJZwiq6L2yc/1N0kJKqQrXqG1MNY6c503bvQQn0a3f+EZWWJ/2/uOitq",
	"S1UTlSGmisBmDeXexLp6Kh9KGLnAAAeG374B+lYlaYGjRqWCdExJisUEQ8fuD1FRE+cpaX5Fmk9Jc6Wz",
	"/i2PDgk+yyai2hrBkTCQYSAxVoPncz4pMTY90vsLDB5bgDifEfsesb87r1bYh1vEoayEKAeDxYHj+eKx",
	"/ODwqYHh0sCR0uDgx6DuyW7shDDGhUgcO5FgNK4HcUCiD08iq6bxtCOumppIMZ6TXuvcfBIcS/eeQybV",
	"CY1UY4qM9Y2dAEwflIBIJMh6kNMrROs3MXqXat/qOfc+dTGj8IQWNwpXphzw0iCX2K2dyz92Lq6CHEB6",
	"rUKPN6pIR/R4FyJBDhg1rDAomhYpV6zMqVqlAk1XgdJIxJ8KA05ss6Ssw4+VlgDUtPFZUDoTt6H+bEGs",
	"kumkkHtvx8CJLozZdL94kQPGgs7z76wjT1vc9s8Fmu8pdL6yngM1C5lyz50OVmYhmUeFR3zkiKQ4p+Nh",
	"Lsg4Wb75LXFekOYdisXOC9Jw3v+Tn4+WaPogWAJElrSYFh1oJEzAj1RqnwM6rMQD5JFe8VFUELB9Yl5O",
	"6eoV4NJ98ZSbVPSbEMQoSPO+Uy7aeQhiQkU1EhxwMJODDwtP+O4a1QX0i9AsHtyakYblINxnix56Zab3",
	"RIR+nyAhzFrYtZvwAxGVBVZCf2I+mmDNs59ebneSrqPRDVrWgmEqMs9MeGvjbLNDQ3vFuGaUCngOctaU",
	"yCKbfrq1blrxH5wTMz2B/04iq2rovL7YN6N5G6lgYIr+RoLIAyb9bCWIeVKilkyviH2H2K2gm2I/5AkX",
	"cW7wZs/rly/FmVc8ILD9JdB+59n1zhfrIcR2Weyz8+HyU/R7IPUc2B+XY9Dfd5vHXeTjunzyzuljMdN1",
	"VE4BKB4/MoOODhzJw2NQyQ+Xh4byx9Dxcr78ztGBwdmZ2aPl47MgrfnjcySw76+J85A4G9zE29evkoZD",
	"jyT25k7rq53rl4h9kzhXaJFsX6GVdXODNH8hzo+k+Ut3Y23HeUHsVnfjKfuwubt8tXt/mTg3ulvf0QdZ",
	"bRptrQ0cjUTIYQpFmBIMSuBMMX8c5j8dyX98djpkFD75AteLYF1mLD4meZK/W8pp2Qk2ldzD9uNf3cZC",
	"SFrEbnW2Huzevp7ob8ByGVnWh4YiUJCha4tnZ0xjAc5o6JCfxO+ufd/d2CSNRhnqZzl8HOpu3qPOam8S",
	"+ypravAf2eZnFYShqlmHuMdRnX21tXP/ZbgM8E6y6FHUq/ytvS+RrZK1QT0HVGvcy1njhrZNZdC8zCSx",
	"Ggh3xjA0BPVkZuTulAuLR+hMSXv/CM2M1PC8Tv9BOlbLEBvmCMawPO/BvMd1VYOYOjcDX8Oy8v4fQoGx",
	"134CQaQ9giwMqUjiKZRu6FTmqq6oJmfM/SBBRmRPWVomkaUqSMcfoMVJLva4aHxtUHtFs8jknxXVKhs1",
	"E84hpSdxKYfI0jiFNFSmnI2aKkamCgWRPl3FWRjfS6OBMYZY4FY9C1kQ5j26uBGzoj28vm8iUkRWr/cQ",
	"dVJWggzCe3J0Hmoa0udQJLbNQAsdHQbJg4LlGZobNRGlW4WaoJ/Tf+0rWYNpkOWsfW29r3VbLlL+hsgR",
	"+EZIRFnK8VeNaHOGqeL5Ssgt8+9kbhw8IuqPJdd7/fnMAjgwjL00e5OHCrtggX4zGRS2foWsxSG2WpvR",
	"1HL+72gx+4ReMDpRm/kALdL1E9CEFQEmaXP9yyRQ3P6K1e0pUpoEXMd5yRDsBBOfu5ofOEot373w2KMB",
	"mXBhTHptqN6TkUwGxX7peAA2zFkKkZtu1lky3Zsqxqt+lR4zyiBP2GtwjOQZ9Vw09vrxZ0+7J6MXLavD",
	"UUpKO/4D9RxAF8paTUGBiOQ7YimoI+j7V6P+0/8RcQcUnGFWZTebRNqiqs9NQBO7HfUKMmo4krccLRaL",
	"RVFsqFm9OybeQbznHDN+s+p2e0FYdQIZBYSl2lAuYq/9eY7nAntzoIymUkDRON9RDrbKmop0fAJi+Jep",
	"8ZNSD8X7KdEdcgJS+hPRZAyaJGVEE1Jk4T8O3LsE/xZo78ZZn2g5hXgS3ZMeUrH+zYDTrMZUVDNVYe4n",
	"jy5xe/aP60tKe3PsuA1kl5DUyQ7Or3PAUud0iGsmklxP8fTPUFc0tD/AkeA1TFJf2pDBkEhA6nnNJjaz",
	"fajW4hdsQvIy2BD3khXVqmpw8WSfLeU+Lxflts0oT8NkCmQgvvChG6r6rOENlEAe7dz29MjE2KGpWrVq",
	"mBS5aqYGSmAe42qpUFhYWDjsdrQPl41KwXKX1eOt/5GJsVCngX87j0yL/zpwuHi4yK7Aq0iHVRWUwNDh",
	"4uFBdnOF55n8+T0w/TSHBLcZncs3d77ZIs1tdj+8Qpwb7Wtr7V9v+SNfpLlMmjeJ84A0H9IFbKiqs/aE",
	"3XV8tvvlJWI/pIvtF8TeSD4OGHEmi6cUMMH7iN0ZWoxGE1YQRqbFLmlihK032vc33clTdp2i0j+fqyF2",
	"Te3KmA1jUO9kug5dZ4ZANWXGw9lmfP1Mmk3SXEnZ35idtVC/BxDnFXHuU2E1HxK7tdvcaq9cev280V3+",
	"IeWYCsTledEpgasmpnwufru7ttppXmx/+R2xW8R+RZXlPCLNe5Qj5yfS/IbYV9qXXxD7GrHvEscmDbv9",
	"an3n0ee7jbvtlxvEvrLbuBuMxQno4s0AEWFBQ3o6COfMzAaLxdjcGKxWNYqlqqEXPrF47RNsKDf7QtGE",
	"+VtUCuMf8J4fu8nnAylgmo04WenG7tx4/Z/1zsp1bqQJC/WutS3A4QJZ+F1DWdw3przZ0Hq9Xk/IbuAA",
	"ZLcoktwo78dR9BjmGov+/i5UDnl5F1szkFxzWqeR0jDVT5Ei0kM958JPYYmNCp2o8z00hFPHXSmE/OPy",
	"7u37Kdo5wZ5m+vEn62IyHE7uTe1Eigm6aCi56D3DnFEVBel8heCEkwY+9J5R0xWxQQrBd+wEvwZrv1rn",
	"3LoGam/xS2b3YtludR883fnhSSqWpgni7RiTlIz7l2AsWjC4olEuhFaBGLwgz+8f0mF1Og0qUlXz3NdL",
	"OnBMhAnZb/gITd0IEUQGfVNv1s9DrYbCsyFn5O7Up0PTIaGJA6kRWjm2g+pUHAUOzPKSIFYoa4ZbIv0u",
	"bNK5wQjqFc5GGdX7jpb7IU9uOulZaoLz8MQRf6Oqj9STu+eod6hUIho+kJ+zv0np/qWj0weCCGfCI/Ns",
	"Uv4WsVfbq3dYavlPGWcPmqdvOr8zHYUN6flN702BRPv4t4IUf4jywOKZwLvM4P0BoXMFM+986sW50X31",
	"ObFv9/CfYML+QAJQMK3mjaiDdwYGB4eKCswrR48N5YePD8H8MTis5MtweAANl9HM4NBQ8EIAM9keQ3By",
	"W9aDgRo+w9tH2Aq/i/CbmZn3SsSBWpn3SpbQpoKOgN1i5fCTGD6LjMudpT7QapKd0buQxHAuo470Oeqs",
	"PeluXAtXk6K44449WweYELLJ9NR68g0qv4RMqOopcLtvj4jFExmX5OIRSuU02+jgxOLewKVlyZkmwIJV",
	"iN+CNxkqrl7jM6K8hm04HrpuE/sBsVtew+Zxp7WaYi68wmWi+RCBvVOeUnR2l7fbK5fYSyHB2KVLVm8f",
	"zSZrXxTnKS3Xt34KvGpJhyVeuHGVvH7e6G5sZvA44m72O+pviXhmbxCls8y9T5Llcb7X75ljS53TVT0D",
	"fJqPGDbfp36YXhExhqf4Xn8Q/KGcuzeJabj7zOWbYtEG69b3FgCfMHgT8hbQDE1V9ELo3gwVZlVdtebT",
	"qfWuVrrbV7tbv+w8c16/vCSk9CN3+9AoDHqPb34wmpO4ie5Hp7LNU8t7WxN4AiV2KyYdT/reikwNWBia",
	"WFYBu2ur7c1VaQVMsb0PECjkL7rTQSRDoj67vSRajk5GCTHWo3Xn9s+7V77nsTQdaz1xhmeu3lCQe5zX",
	"ki2E00Qp5LcPgRaWgi89LgdEIuY5Vkr+JCXl4VSY68mvf7iAX5myK8x5ZvHV66Wq6Yh0TWSpFkamNPxy",
	"niTgd9Ld+W1Brz/yKVvnTKI5RnAfpY5Q6/ymdffqs5ioehm6rwpJHObbS+Cwp4m3icHxMcI+kSMm00w0",
	"pnsg87znS3yQogCrKm/M8CciTUX2Mqf73d8p9DfWiQ59x+y9bv+r6f0HFv5fvL5dfbr+3wAAAP//aMOg",
	"IQpMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
