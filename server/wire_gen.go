// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/mazrean/one-poll/handler/v1"
	"github.com/mazrean/one-poll/pkg/common"
	"github.com/mazrean/one-poll/repository"
	"github.com/mazrean/one-poll/repository/gorm2"
	"github.com/mazrean/one-poll/service"
	v1_2 "github.com/mazrean/one-poll/service/v1"
)

// Injectors from wire.go:

func InjectService(config *Config) (*Service, error) {
	checker := v1.NewChecker()
	sessionKey := config.SessionKey
	sessionSecret := config.SessionSecret
	session := v1.NewSession(sessionKey, sessionSecret)
	isProduction := config.IsProduction
	db, err := gorm2.NewDB(isProduction)
	if err != nil {
		return nil, err
	}
	user := gorm2.NewUser(db)
	authorization := v1_2.NewAuthorization(db, user)
	v1User := v1.NewUser(session, authorization)
	poll, err := gorm2.NewPoll(db)
	if err != nil {
		return nil, err
	}
	choice := gorm2.NewChoice(db)
	tag := gorm2.NewTag(db)
	response := gorm2.NewResponse(db)
	v1Poll := v1_2.NewPoll(db, poll, choice, tag, response)
	poll2 := v1.NewPoll(session, v1Poll)
	v1Tag := v1_2.NewTag(db, tag)
	tag2 := v1.NewTag(v1Tag)
	comment := gorm2.NewComment(db)
	pollAuthority := v1_2.NewPollAuthority(response)
	v1Comment := v1_2.NewComment(response, comment, poll, pollAuthority)
	comment2 := v1.NewComment(session, v1Comment)
	v1Response := v1_2.NewResponse(db, poll, response, comment, choice, pollAuthority)
	response2 := v1.NewResponse(session, v1Response)
	api := v1.NewAPI(checker, v1User, poll2, tag2, comment2, response2)
	service := NewService(api)
	return service, nil
}

// wire.go:

type Config struct {
	IsProduction  common.IsProduction
	SessionKey    common.SessionKey
	SessionSecret common.SessionSecret
}

var (
	isProductionField  = wire.FieldsOf(new(*Config), "IsProduction")
	sessionKeyField    = wire.FieldsOf(new(*Config), "SessionKey")
	sessionSecretField = wire.FieldsOf(new(*Config), "SessionSecret")
)

var (
	dbBind                 = wire.Bind(new(repository.DB), new(*gorm2.DB))
	userRepositoryBind     = wire.Bind(new(repository.User), new(*gorm2.User))
	pollRepositoryBind     = wire.Bind(new(repository.Poll), new(*gorm2.Poll))
	choiceRepositoryBind   = wire.Bind(new(repository.Choice), new(*gorm2.Choice))
	tagRepositoryBind      = wire.Bind(new(repository.Tag), new(*gorm2.Tag))
	responseRepositoryBind = wire.Bind(new(repository.Response), new(*gorm2.Response))
	commentRepositoryBind  = wire.Bind(new(repository.Comment), new(*gorm2.Comment))

	authorizationServiceBind = wire.Bind(new(service.Authorization), new(*v1_2.Authorization))
	pollServiceBind          = wire.Bind(new(service.Poll), new(*v1_2.Poll))
	tagServiceBind           = wire.Bind(new(service.Tag), new(*v1_2.Tag))
	commentServiceBind       = wire.Bind(new(service.Comment), new(*v1_2.Comment))
	responseServiceBind      = wire.Bind(new(service.Response), new(*v1_2.Response))
)

type Service struct {
	*v1.API
}

func NewService(api *v1.API) *Service {
	return &Service{
		API: api,
	}
}
