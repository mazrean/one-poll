// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/cs-sysimpl/suzukake/handler/v1"
	"github.com/cs-sysimpl/suzukake/pkg/common"
	"github.com/cs-sysimpl/suzukake/repository"
	"github.com/cs-sysimpl/suzukake/repository/gorm2"
	"github.com/cs-sysimpl/suzukake/service"
	v1_2 "github.com/cs-sysimpl/suzukake/service/v1"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InjectService(config *Config) (*Service, error) {
	checker := v1.NewChecker()
	sessionKey := config.SessionKey
	sessionSecret := config.SessionSecret
	session := v1.NewSession(sessionKey, sessionSecret)
	isProduction := config.IsProduction
	db, err := gorm2.NewDB(isProduction)
	if err != nil {
		return nil, err
	}
	user := gorm2.NewUser(db)
	authorization := v1_2.NewAuthorization(db, user)
	v1User := v1.NewUser(session, authorization)
	api := v1.NewAPI(checker, v1User)
	service := NewService(api)
	return service, nil
}

// wire.go:

type Config struct {
	IsProduction  common.IsProduction
	SessionKey    common.SessionKey
	SessionSecret common.SessionSecret
}

var (
	isProductionField  = wire.FieldsOf(new(*Config), "IsProduction")
	sessionKeyField    = wire.FieldsOf(new(*Config), "SessionKey")
	sessionSecretField = wire.FieldsOf(new(*Config), "SessionSecret")
)

var (
	dbBind             = wire.Bind(new(repository.DB), new(*gorm2.DB))
	userRepositoryBind = wire.Bind(new(repository.User), new(*gorm2.User))

	authorizationServiceBind = wire.Bind(new(service.Authorization), new(*v1_2.Authorization))
)

type Service struct {
	*v1.API
}

func NewService(api *v1.API) *Service {
	return &Service{
		API: api,
	}
}
